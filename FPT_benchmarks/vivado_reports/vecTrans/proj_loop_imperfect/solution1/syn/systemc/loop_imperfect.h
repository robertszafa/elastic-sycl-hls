// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _loop_imperfect_HH_
#define _loop_imperfect_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "loop_imperfect_mubkb.h"

namespace ap_rtl {

struct loop_imperfect : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_out< sc_logic > A_we0;
    sc_out< sc_lv<32> > A_d0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<10> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<32> > b_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    loop_imperfect(sc_module_name name);
    SC_HAS_PROCESS(loop_imperfect);

    ~loop_imperfect();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U1;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U2;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U3;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U4;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U5;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U6;
    loop_imperfect_mubkb<1,5,32,32,32>* loop_imperfect_mubkb_U7;
    sc_signal< sc_lv<32> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > i_fu_105_p2;
    sc_signal< sc_lv<10> > i_reg_209;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln96_fu_99_p2;
    sc_signal< sc_lv<32> > d_reg_224;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > b_load_reg_240;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_lv<10> > i_0_reg_88;
    sc_signal< sc_logic > ap_CS_fsm_state31;
    sc_signal< sc_lv<64> > zext_ln98_fu_111_p1;
    sc_signal< sc_lv<64> > sext_ln99_fu_202_p1;
    sc_signal< sc_lv<32> > add_ln99_fu_117_p0;
    sc_signal< sc_lv<32> > grp_fu_123_p1;
    sc_signal< sc_lv<32> > grp_fu_123_p2;
    sc_signal< sc_lv<32> > grp_fu_135_p1;
    sc_signal< sc_lv<32> > grp_fu_135_p2;
    sc_signal< sc_lv<32> > grp_fu_146_p1;
    sc_signal< sc_lv<32> > grp_fu_146_p2;
    sc_signal< sc_lv<32> > grp_fu_157_p1;
    sc_signal< sc_lv<32> > grp_fu_157_p2;
    sc_signal< sc_lv<32> > grp_fu_168_p1;
    sc_signal< sc_lv<32> > grp_fu_168_p2;
    sc_signal< sc_lv<32> > grp_fu_179_p1;
    sc_signal< sc_lv<32> > grp_fu_179_p2;
    sc_signal< sc_lv<32> > grp_fu_190_p1;
    sc_signal< sc_lv<32> > grp_fu_190_p2;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_lv<32> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_ST_fsm_state1;
    static const sc_lv<32> ap_ST_fsm_state2;
    static const sc_lv<32> ap_ST_fsm_state3;
    static const sc_lv<32> ap_ST_fsm_state4;
    static const sc_lv<32> ap_ST_fsm_state5;
    static const sc_lv<32> ap_ST_fsm_state6;
    static const sc_lv<32> ap_ST_fsm_state7;
    static const sc_lv<32> ap_ST_fsm_state8;
    static const sc_lv<32> ap_ST_fsm_state9;
    static const sc_lv<32> ap_ST_fsm_state10;
    static const sc_lv<32> ap_ST_fsm_state11;
    static const sc_lv<32> ap_ST_fsm_state12;
    static const sc_lv<32> ap_ST_fsm_state13;
    static const sc_lv<32> ap_ST_fsm_state14;
    static const sc_lv<32> ap_ST_fsm_state15;
    static const sc_lv<32> ap_ST_fsm_state16;
    static const sc_lv<32> ap_ST_fsm_state17;
    static const sc_lv<32> ap_ST_fsm_state18;
    static const sc_lv<32> ap_ST_fsm_state19;
    static const sc_lv<32> ap_ST_fsm_state20;
    static const sc_lv<32> ap_ST_fsm_state21;
    static const sc_lv<32> ap_ST_fsm_state22;
    static const sc_lv<32> ap_ST_fsm_state23;
    static const sc_lv<32> ap_ST_fsm_state24;
    static const sc_lv<32> ap_ST_fsm_state25;
    static const sc_lv<32> ap_ST_fsm_state26;
    static const sc_lv<32> ap_ST_fsm_state27;
    static const sc_lv<32> ap_ST_fsm_state28;
    static const sc_lv<32> ap_ST_fsm_state29;
    static const sc_lv<32> ap_ST_fsm_state30;
    static const sc_lv<32> ap_ST_fsm_state31;
    static const sc_lv<32> ap_ST_fsm_state32;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_70;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_52;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_64;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_A_d0();
    void thread_A_we0();
    void thread_add_ln99_fu_117_p0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state31();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_grp_fu_123_p1();
    void thread_grp_fu_135_p1();
    void thread_grp_fu_146_p1();
    void thread_grp_fu_157_p1();
    void thread_grp_fu_168_p1();
    void thread_grp_fu_179_p1();
    void thread_grp_fu_190_p1();
    void thread_i_fu_105_p2();
    void thread_icmp_ln96_fu_99_p2();
    void thread_sext_ln99_fu_202_p1();
    void thread_zext_ln98_fu_111_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
