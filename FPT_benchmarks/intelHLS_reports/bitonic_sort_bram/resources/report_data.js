var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[41.2863, 21.3588, 21.1838, 18.2455, 8.10277], "total":[181850, 361989, 495, 123, 32], "name":"Kernel System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[179950, 358572, 492, 123, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"System description ROM", "type":"resource", "data":[0, 67, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"MainKernel", "compute_units":1, "type":"function", "total_percent":[0.465962, 0.297285, 0.196044, 0.0368596, 0], "total_kernel_resources":[1900, 3350, 1, 0, 32], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1072, 2225, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"Coalesced Private Variables: \\n - \'k\' (bitonic_sort_bram.cpp:39)\\n - \'j\' (bitonic_sort_bram.cpp:40)", "type":"resource", "data":[7, 36, 0, 0, 0], "debug":[[{"filename":"bitonic_sort_bram.cpp", "line":39}], [{"filename":"bitonic_sort_bram.cpp", "line":40}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 31 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 31 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'i\' (bitonic_sort_bram.cpp:41)", "type":"resource", "data":[14, 47, 0, 0, 0], "debug":[[{"filename":"bitonic_sort_bram.cpp", "line":41}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 7 bits and depth 1", "details":[{"type":"text", "text":" Depth was increased by a factor of 7 due to a loop initiation interval of 7."}]}, {"type":"text", "text":"1 register of width 32 bits and depth 1", "details":[{"type":"text", "text":" Depth was increased by a factor of 7 due to a loop initiation interval of 7."}]}, {"type":"brief", "text":"Register,\\n1 reg, 7 width by 1 depth,\\n1 reg, 32 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'j\' (bitonic_sort_bram.cpp:40)", "type":"resource", "data":[7, 36, 0, 0, 0], "debug":[[{"filename":"bitonic_sort_bram.cpp", "line":40}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 32 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 32 width by 1 depth"}]}, {"name":"bitonic_sort_bram.cpp:29 (A)", "type":"resource", "data":[33, 256, 1, 0, 0], "debug":[[{"filename":"bitonic_sort_bram.cpp", "line":29}]], "details":[{"type":"table", "Private memory":"Stall-free", "Requested size":"256 bytes", "Implemented size":"256 bytes", "Memory Usage":"1 RAM", "Number of banks":"1", "Bank width":"32 bits", "Bank depth":"64 words", "Number of replicates":"1", "Number of private copies":"1", "Clock":"Running memory at 2x clock to support more concurrent ports", "Additional information":[{"type":"text", "text":"Requested size 256 bytes, implemented size 256 bytes, stall-free, 2 reads and 2 writes. "}, {"type":"text", "text":"Reducing accesses to exactly one read and one write for all on-chip memory systems may increase overall system performance."}, {"type":"text", "text":"Private memory implemented in on-chip block RAM."}], "Reference":[{"type":"text", "text":"See %L for more information.", "links":[{"guide":"Best Practices Guide : Local Memory", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/chn1469549457114.html"}]}]}, {"type":"brief", "text":"Stall-free,\\n256B requested,\\n256B implemented."}]}, {"name":"MainKernel.B0", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[8, 2, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:29", "type":"resource", "data":[8, 2, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":29}]]}]}]}, {"name":"MainKernel.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[2, 2, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[2, 2, 0, 0, 0]}]}, {"name":"Feedback", "type":"resource", "data":[16, 15, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:39", "type":"resource", "data":[16, 15, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 2], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:39", "type":"resource", "data":[1, 0, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]], "children":[{"name":"4-bit Integer Compare", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"MainKernel.B2", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[12, 13, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[12, 13, 0, 0, 0]}]}, {"name":"Feedback", "type":"resource", "data":[27, 19, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:51", "type":"resource", "data":[27, 19, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":51}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 1], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[]}]}, {"name":"MainKernel.B3", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[87, 170, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[87, 170, 0, 0, 0]}]}, {"name":"Feedback", "type":"resource", "data":[42, 57, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[1, 0, 0, 0, 0]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:39", "type":"resource", "data":[24, 46, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:40", "type":"resource", "data":[7, 7, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":40}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:51", "type":"resource", "data":[10, 4, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":51}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 6], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"No Source Line", "type":"resource", "data":[1, 0, 0, 0, 0], "debug":[[{"filename":"", "line":0}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:40", "type":"resource", "data":[35, 1, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":40}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[35, 1, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"MainKernel.B5", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[101, 187, 0, 0, 10], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[101, 187, 0, 0, 10]}]}, {"name":"Feedback", "type":"resource", "data":[77, 117, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:39", "type":"resource", "data":[24, 46, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:40", "type":"resource", "data":[25, 49, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":40}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:41", "type":"resource", "data":[9, 7, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:51", "type":"resource", "data":[8, 5, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":51}]]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:52", "type":"resource", "data":[11, 10, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":52}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 3], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"No Source Line", "type":"resource", "data":[37, 1, 0, 0, 0], "debug":[[{"filename":"", "line":0}]], "children":[{"name":"1-bit And", "type":"resource", "count":2, "data":[2, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[35, 1, 0, 0, 0]}]}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:41", "type":"resource", "data":[2, 0, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]], "children":[{"name":"7-bit Integer Compare", "type":"resource", "count":1, "data":[2, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:42", "type":"resource", "data":[32, 0, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":42}]], "children":[{"name":"32-bit Xor", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:44", "type":"resource", "data":[36.1667, 1.33333, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":44}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":2, "data":[0.666667, 0.333333, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[35, 1, 0, 0, 0]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:45", "type":"resource", "data":[26, 41, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":45}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[26, 41, 0, 0, 0], "details":[{"type":"text", "text":"Load uses a Pipelined never-stall LSU"}, {"type":"brief", "text":"Pipelined never-stall LSU"}, {"type":"text", "text":"Stall-free read from memory declared on %L.", "links":[{"filename":"bitonic_sort_bram.cpp", "line":"29"}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:46", "type":"resource", "data":[26, 41, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":46}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[26, 41, 0, 0, 0], "details":[{"type":"text", "text":"Load uses a Pipelined never-stall LSU"}, {"type":"brief", "text":"Pipelined never-stall LSU"}, {"type":"text", "text":"Stall-free read from memory declared on %L.", "links":[{"filename":"bitonic_sort_bram.cpp", "line":"29"}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:48", "type":"resource", "data":[92.8333, 2.66667, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":48}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":4, "data":[1.33333, 0.666667, 0, 0, 0]}, {"name":"1-bit Select", "type":"resource", "count":2, "data":[2, 0, 0, 0, 0]}, {"name":"32-bit And", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":3, "data":[57, 2, 0, 0, 0]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:51", "type":"resource", "data":[34.5, 24, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":51}]], "children":[{"name":"1-bit Or", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}, {"name":"Store", "type":"resource", "count":1, "data":[34, 24, 0, 0, 0], "details":[{"type":"text", "text":"Store uses a Pipelined never-stall LSU"}, {"type":"brief", "text":"Pipelined never-stall LSU"}, {"type":"text", "text":"Stall-free write to memory declared on %L.", "links":[{"filename":"bitonic_sort_bram.cpp", "line":"29"}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}], "replace_name":"true"}, {"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:52", "type":"resource", "data":[34.5, 24, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1166}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":52}]], "children":[{"name":"1-bit Or", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}, {"name":"Store", "type":"resource", "count":1, "data":[34, 24, 0, 0, 0], "details":[{"type":"text", "text":"Store uses a Pipelined never-stall LSU"}, {"type":"brief", "text":"Pipelined never-stall LSU"}, {"type":"text", "text":"Stall-free write to memory declared on %L.", "links":[{"filename":"bitonic_sort_bram.cpp", "line":"29"}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}], "replace_name":"true"}]}]}, {"name":"MainKernel.B6", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[5, 8, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"handler.hpp:1170", "type":"resource", "data":[5, 8, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":1170}]]}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[179950,358572,492,123,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[0,67,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[207,242,0,0,12],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1072,2225,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"data":[7,36,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 31 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 31 width by 1 depth","type":"brief"}],"name":"Coalesced Private Variables: \\n - \'k\' (bitonic_sort_bram.cpp:39)\\n - \'j\' (bitonic_sort_bram.cpp:40)","type":"resource"},{"data":[14,47,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"details":[{"text":" Depth was increased by a factor of 7 due to a loop initiation interval of 7.","type":"text"}],"text":"1 register of width 7 bits and depth 1","type":"text"},{"details":[{"text":" Depth was increased by a factor of 7 due to a loop initiation interval of 7.","type":"text"}],"text":"1 register of width 32 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 7 width by 1 depth,\\n1 reg, 32 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'i\' (bitonic_sort_bram.cpp:41)","type":"resource"},{"data":[7,36,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 32 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 32 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'j\' (bitonic_sort_bram.cpp:40)","type":"resource"},{"data":[33,256,1,0,0],"details":[{"Additional information":[{"text":"Requested size 256 bytes, implemented size 256 bytes, stall-free, 2 reads and 2 writes. ","type":"text"},{"text":"Reducing accesses to exactly one read and one write for all on-chip memory systems may increase overall system performance.","type":"text"},{"text":"Private memory implemented in on-chip block RAM.","type":"text"}],"Bank depth":"64 words","Bank width":"32 bits","Clock":"Running memory at 2x clock to support more concurrent ports","Implemented size":"256 bytes","Memory Usage":"1 RAM","Number of banks":"1","Number of private copies":"1","Number of replicates":"1","Private memory":"Stall-free","Reference":[{"links":[{"guide":"Best Practices Guide : Local Memory","link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/chn1469549457114.html"}],"text":"See %L for more information.","type":"text"}],"Requested size":"256 bytes","type":"table"},{"text":"Stall-free,\\n256B requested,\\n256B implemented.","type":"brief"}],"name":"bitonic_sort_bram.cpp:29 (A)","type":"resource"},{"children":[{"count":4,"data":[202,372,0,0,10],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"},{"count":3,"data":[3,0,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"1-bit And","type":"resource"},{"count":1,"data":[35,1,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"32-bit Integer Compare","type":"resource"}],"data":[240,373,0,0,10],"name":"No Source Line","type":"resource"},{"children":[{"children":[{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"4-bit Integer Compare","type":"resource"}],"data":[1,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":39}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:39","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[35,1,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"32-bit Integer Compare","type":"resource"}],"data":[35,1,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":40}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:40","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[2,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"7-bit Integer Compare","type":"resource"}],"data":[2,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":41}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:41","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[32,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"32-bit Xor","type":"resource"}],"data":[32,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":42}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:42","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[0.5,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit And","type":"resource"},{"count":2,"data":[0.666667,0.333333,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[35,1,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"32-bit Integer Compare","type":"resource"}],"data":[36.1667,1.33333,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":44}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:44","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[26,41,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"Load","type":"resource"}],"data":[26,41,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":45}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:45","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[26,41,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"Load","type":"resource"}],"data":[26,41,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":46}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:46","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[0.5,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit And","type":"resource"},{"count":4,"data":[1.33333,0.666667,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit Or","type":"resource"},{"count":2,"data":[2,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit Select","type":"resource"},{"count":1,"data":[32,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"32-bit And","type":"resource"},{"count":3,"data":[57,2,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"32-bit Integer Compare","type":"resource"}],"data":[92.8333,2.66667,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":48}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:48","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[0.5,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[34,24,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"Store","type":"resource"}],"data":[34.5,24,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":51}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:51","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[0.5,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[34,24,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":"1166"}]],"name":"Store","type":"resource"}],"data":[34.5,24,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166},{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp","line":52}]],"name":"handler.hpp:1166 > bitonic_sort_bram.cpp:52","replace_name":true,"type":"resource"}],"data":[320,135,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp","line":1166}]],"name":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp:1166","replace_name":"true","type":"resource"}],"compute_units":1,"data":[1900,3350,1,0,32],"debug":[[{"filename":"bitonic_sort_bram.cpp","line":29}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"MainKernel","total_kernel_resources":[1900,3350,1,0,32],"total_percent":[0.465962,0.297285,0.196044,0.0368596,0],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[1900,3417,3,0,32],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"Kernel System","total":[181850,361989,495,123,32],"total_percent":[41.2863,21.3588,21.1838,18.2455,8.10277],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"MainKernel", "children":[{"type":"bb", "id":3, "name":"MainKernel.B0", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"MainKernel.B1", "details":[{"type":"table", "Latency":"5", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Entry to loop. ", "Loops To":"7"}]}, {"type":"bb", "id":5, "name":"MainKernel.B2", "details":[{"type":"table", "Latency":"7", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Exit which branches back to loop. "}]}, {"type":"bb", "id":6, "name":"MainKernel.B3", "details":[{"type":"table", "Latency":"6", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Entry to loop. ", "Loops To":"5"}]}, {"type":"bb", "id":7, "name":"MainKernel.B4", "details":[{"type":"table", "Latency":"0", "II":"1", "Subloops":"Yes", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Exit which branches back to loop. "}]}, {"type":"bb", "id":8, "name":"MainKernel.B5", "children":[{"type":"inst", "id":10, "name":"Load", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":45}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined never-stall", "Stall-free":"Yes", "Loads from":"A", "Start Cycle":"2", "Latency":"4", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":11, "name":"Load", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":46}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined never-stall", "Stall-free":"Yes", "Loads from":"A", "Start Cycle":"2", "Latency":"4", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":12, "name":"Store", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":51}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined never-stall", "Stall-free":"Yes", "Stores to":"A", "Start Cycle":"7", "Latency":"1", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":13, "name":"Store", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":52}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined never-stall", "Stall-free":"Yes", "Stores to":"A", "Start Cycle":"8", "Latency":"1", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":14, "name":"Loop Input", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"15"}]}, {"type":"inst", "id":15, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"12", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"12", "II":"7", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"Loop is pipelined with II of 7. See Loops Analysis for more information."}]}, {"type":"bb", "id":9, "name":"MainKernel.B6", "details":[{"type":"table", "Latency":"0"}]}, {"type":"csr", "id":16, "name":"Register Map", "debug":[[{"filename":"bitonic_sort_bram_fpga_hw.prj/ZTS10MainKernel_csr.hpp", "line":1}]], "children":[{"type":"interface", "id":17, "name":"start", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":28}]]}, {"type":"interface", "id":18, "name":"done", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":28}]]}, {"type":"interface", "id":19, "name":"busy", "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":28}]]}]}, {"type":"memtype", "id":20, "name":"On-chip Memory", "children":[{"type":"memsys", "id":21, "name":"A", "debug":[[{"filename":"bitonic_sort_bram.cpp", "line":29}]], "details":[{"type":"table", "Requested size":"256 bytes", "Implemented size":"256 bytes", "Number of banks":"1", "Bank width":"32 bits", "Bank depth":"64 words", "Number of replicates":"1", "Number of private copies":"1", "Additional Information":"Running memory at 2x clock to support more concurrent ports", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Local Memory", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/chn1469549457114.html"}]}]}]}]}]}], "links":[{"from":17, "to":3}, {"from":9, "to":18}, {"from":3, "to":19, "reverse":2}, {"from":21, "to":10}, {"from":21, "to":11}, {"from":12, "to":21}, {"from":13, "to":21}, {"from":7, "to":4}, {"from":3, "to":4}, {"from":15, "to":5}, {"from":5, "to":6}, {"from":4, "to":6}, {"from":5, "to":7}, {"from":15, "to":14}, {"from":6, "to":14}, {"from":13, "to":15}, {"from":7, "to":9}, {"from":14, "to":10}, {"from":14, "to":11}, {"from":11, "to":12}, {"from":10, "to":12}, {"from":10, "to":13}, {"from":11, "to":13}, {"from":12, "to":13}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: MainKernel", "data":["", "", ""], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":28}]], "details":[{"type":"brief", "text":"Single work-item execution"}, {"type":"text", "text":"Single work-item execution"}, {"type":"text", "text":"fMAX bottleneck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"MainKernel.B1", "data":["Yes", ">=1", "0"], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]], "details":[{"type":"text", "text":"Stallable instruction: n/a"}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"Average Trip count: 6 (exact)"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Nested Loops", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/rfr1469543500580.html"}]}], "children":[{"name":"MainKernel.B3", "data":["Yes", ">=1", "0"], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":40}]], "details":[{"type":"brief", "text":"Serial exe: Memory dependency"}, {"type":"text", "text":"Iteration executed serially across MainKernel.B5. Only a single loop iteration will execute inside this region due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"45"}]}, {"type":"text", "text":"To: Store Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"51"}]}]}, {"type":"text", "text":"Stallable instruction: n/a"}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Nested Loops", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/rfr1469543500580.html"}]}], "children":[{"name":"MainKernel.B5", "data":["Yes", "7", "0"], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]], "details":[{"type":"brief", "text":"Memory dependency"}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"45"}]}, {"type":"text", "text":"To: Store Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"52"}]}]}, {"type":"text", "text":"Compiler failed to schedule this loop with smaller II due to memory dependency:", "details":[{"type":"text", "text":"From: Load Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"46"}]}, {"type":"text", "text":"To: Store Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"52"}]}]}, {"type":"text", "text":"Most critical loop feedback path during scheduling:", "details":[{"type":"text", "text":"4.00 clock cycles Load Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"46"}]}, {"type":"text", "text":"1.00 clock cycle Store Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"51"}]}, {"type":"text", "text":"1.00 clock cycle Store Operation (%L > %L)", "links":[{"filename":"/glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/bin-llvm/../include/sycl/handler.hpp", "line":"1166"}, {"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":"52"}]}]}, {"type":"text", "text":"Stallable instruction: None"}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"Average Trip count: 64 (exact)"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"file:////glob/development-tools/versions/oneapi/2023.1.1/oneapi/compiler/2023.1.0/linux/lib/oclfpga/aoc_help_pages/wfa1476380079940.html"}]}], "children":[]}]}]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":106, "nodes":[{"name":"MainKernel", "id":1, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"MainKernel.B0", "id":2, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"MainKernel.B1", "id":3, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"5.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":39}]], "type":"loop", "children":[{"name":"MainKernel.B3", "id":5, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"2", "lt":"6.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"0", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]], "type":"loop", "children":[{"name":"MainKernel.B5", "id":7, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"7", "ll":"3", "lt":"12.000000", "mi":"1", "pl":"Yes", "tc":"64", "tn":"0", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "line":41}]], "type":"loop"}]}, {"name":"MainKernel.B2", "id":4, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"2", "lt":"7.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}, {"name":"MainKernel.B4", "id":6, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"0.000000", "mi":"n/a", "pl":"Yes", "tc":"6", "tn":"1", "type":"bb"}, {"name":"MainKernel.B6", "id":8, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"1.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units"], "children":[{"name":"MainKernel", "data":["Single work-item", "No", [1, 1, 1], 1], "details":[{"type":"text", "text":"Kernel type: Single work-item"}, {"type":"text", "text":"Required workgroup size: (1, 1, 1)"}, {"type":"text", "text":"Maximum workgroup size: 1"}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"MainKernel", "data":[1900, 3350, 1, 0, 32], "debug":[[{"filename":"", "line":0}]]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[179950, 358572, 492, 123, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[0, 67, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[181850, 361989, 495, 123, 32], "data_percent":[21.2839, 21.1838, 18.2455, 8.10277]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "name":"bitonic_sort_bram.cpp", "has_active_debug_locs":false, "absName":"/home/u119070/git/elastic-sycl-hls/experiments/bitonic_sort_bram.cpp", "content":"#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#include <sycl/sycl.hpp>\u000A\u000A#include <algorithm>\u000A#include <iostream>\u000A#include <numeric>\u000A#include <random>\u000A#include <stdlib.h>\u000A#include <vector>\u000A\u000A#include \"memory_utils.hpp\"\u000A#include \"exception_handler.hpp\"\u000A\u000Ausing namespace sycl;\u000A\u000A// Forward declare kernel name.\u000Aclass MainKernel;\u000A\u000A// Must be a power of 2\u000Aconstexpr int kN = 64;\u000A\u000A#define TEST 0\u000A\u000Adouble sort_kernel(queue &q, std::vector<int> &h_A) {\u000A  const int N = h_A.size();\u000A  int *A_dram = fpga_tools::toDevice(h_A, q);\u000A\u000A  auto event = q.single_task<MainKernel>([=]() [[intel::kernel_args_restrict]] {\u000A    int A[kN];\u000A\u000A#if TEST\u000A    for (int i = 0; i < N; i++)\u000A      A[i] = A_dram[i];\u000A#endif\u000A\u000A    // From: https://en.wikipedia.org/wiki/Bitonic_sorter\u000A    // given an array arr of length n, this code sorts it in place\u000A    // all indices run from 0 to n-1\u000A    for (int k = 2; k <= kN; k <<= 1) { // k is doubled every iteration\u000A      for (int j = k >> 1; j > 0; j >>= 1) { // j is halved at every iteration\u000A        for (int i = 0; i < kN; i++) {\u000A          int l = i ^ j; \u000A\u000A          if (l > i) {\u000A            int Ai = A[i];\u000A            int Al = A[l];\u000A\u000A            bool swap = ((i & k) == 0 && Ai > Al) || ((i & k) != 0 && Ai < Al);\u000A\u000A            if (swap) {\u000A              A[i] = Al;\u000A              A[l] = Ai;\u000A            }\u000A          }\u000A\u000A        }\u000A      }\u000A    }\u000A\u000A#if TEST\u000A    for (int i = 0; i < N; i++)\u000A      A_dram[i] = A[i];\u000A#endif\u000A  });\u000A\u000A  event.wait();\u000A  \u000A  q.copy(A_dram, h_A.data(), h_A.size()).wait();\u000A\u000A  sycl::free(A_dram, q);\u000A\u000A  auto start = event.get_profiling_info<info::event_profiling::command_start>();\u000A  auto end = event.get_profiling_info<info::event_profiling::command_end>();\u000A  double time_in_ms = static_cast<double>(end - start) / 1000000;\u000A\u000A  return time_in_ms;\u000A}\u000A\u000A\u000Aint main(int argc, char *argv[]) {\u000A  int ARRAY_SIZE = 1000;\u000A  int PERCENTAGE = 0;\u000A  try {\u000A    if (argc > 1) {\u000A      ARRAY_SIZE = int(atoi(argv[1]));\u000A    }\u000A    if (argc > 2) {\u000A      PERCENTAGE = int(atoi(argv[2]));\u000A      if (PERCENTAGE < 0 || PERCENTAGE > 100)\u000A        throw std::invalid_argument(\"Invalid percentage.\");\u000A    }\u000A  } catch (exception const &e) {\u000A    std::cout << \"Incorrect argv.\\nUsage:\\n\"\u000A              << \"  ./executable [ARRAY_SIZE] [PERCENTAGE (% of iterations \"\u000A                 \"with dependencies.)]\\n\";\u000A    std::terminate();\u000A  }\u000A\u000A#if FPGA_SIM\u000A  std::cout << \"SIMULATION:\\n\";\u000A  auto d_selector = sycl::ext::intel::fpga_simulator_selector_v;\u000A#elif FPGA_HW \u000A  auto d_selector = sycl::ext::intel::fpga_selector_v;\u000A#else  // #if FPGA_EMULATOR\u000A  auto d_selector = sycl::ext::intel::fpga_emulator_selector_v;\u000A#endif\u000A\u000A  try {\u000A    // Enable profiling.\u000A    property_list properties{property::queue::enable_profiling()};\u000A    queue q(d_selector, exception_handler, properties);\u000A    auto device = q.get_device();\u000A\u000A    // Print out the device information used for the kernel code.\u000A    std::cout << \"Running on device: \"\u000A              << device.get_info<sycl::info::device::name>().c_str() << \"\\n\";\u000A\u000A    std::vector<int> arr(ARRAY_SIZE);\u000A    std::vector<int> arr_cpu(ARRAY_SIZE);\u000A    \u000A    for (size_t i=0; i<kN; ++i) {\u000A      if (PERCENTAGE == 100)\u000A        arr[i] = kN - i;\u000A      else if (PERCENTAGE == 0)\u000A        arr[i] = i;\u000A      else\u000A        arr[i] = rand();\u000A    }\u000A\u000A    std::copy_n(arr.begin(), kN, arr_cpu.begin());\u000A\u000A    auto kernel_time = sort_kernel(q, arr);\u000A\u000A    std::cout << \"\\nKernel time (ms): \" << kernel_time << \"\\n\";\u000A\u000A#if TEST\u000A    std::sort(arr_cpu.begin(), arr_cpu.end());\u000A    if (std::equal(arr.begin(), arr.end(), arr_cpu.begin())) {\u000A      std::cout << \"Passed\\n\";\u000A    } else {\u000A      std::cout << \"Failed\\n\";\u000A    }\u000A#endif\u000A\u000A  } catch (exception const &e) {\u000A    std::cout << \"An exception was caught.\\n\";\u000A    std::terminate();\u000A  }\u000A\u000A  return 0;\u000A}\u000A"}, {"path":"/home/u119070/git/elastic-sycl-hls/include_sycl/exception_handler.hpp", "name":"exception_handler.hpp", "has_active_debug_locs":false, "absName":"/home/u119070/git/elastic-sycl-hls/include_sycl/exception_handler.hpp", "content":"#ifndef __EXCEPTIONHANDLER_HPP__\u000A#define __EXCEPTIONHANDLER_HPP__\u000A#include <sycl/sycl.hpp>\u000A#include <exception>\u000A#include <iostream>\u000A\u000Avoid exception_handler(sycl::exception_list exceptions) {\u000A  for (std::exception_ptr const &e : exceptions) {\u000A    try {\u000A      std::rethrow_exception(e);\u000A    } catch (sycl::exception const &e) {\u000A      std::cout << \"Caught asynchronous SYCL exception:\\n\"\u000A                << e.what() << std::endl;\u000A    }\u000A  }\u000A}\u000A\u000A\u000A#endif //__EXCEPTIONHANDLER_HPP__\u000A"}, {"path":"/home/u119070/git/elastic-sycl-hls/include_sycl/memory_utils.hpp", "name":"memory_utils.hpp", "has_active_debug_locs":false, "absName":"/home/u119070/git/elastic-sycl-hls/include_sycl/memory_utils.hpp", "content":"#ifndef __MEMORY_UTILS_HPP__\u000A#define __MEMORY_UTILS_HPP__\u000A\u000A#include <type_traits>\u000A\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#include <sycl/sycl.hpp>\u000A\u000A#include \"metaprogramming_utils.hpp\"\u000A\u000A//\u000A// The utilities in this file are used for converting streaming data to/from\u000A// memory from/to a pipe.\u000A//\u000A\u000Anamespace fpga_tools {\u000A\u000Anamespace detail {\u000A\u000A//\u000A// Helper to check if a SYCL pipe and pointer have the same base type\u000A//\u000Atemplate <typename PipeT, typename PtrT>\u000Astruct pipe_and_pointer_have_same_base {\u000A  using PipeBaseT =\u000A      std::conditional_t<fpga_tools::has_subscript_v<PipeT>,\u000A                         std::decay_t<decltype(std::declval<PipeT>()[0])>,\u000A                         PipeT>;\u000A  using PtrBaseT = std::decay_t<decltype(std::declval<PtrT>()[0])>;\u000A  static constexpr bool value = std::is_same_v<PipeBaseT, PtrBaseT>;\u000A};\u000A\u000Atemplate <typename PipeT, typename PtrT>\u000Ainline constexpr bool pipe_and_pointer_have_same_base_v =\u000A    pipe_and_pointer_have_same_base<PipeT, PtrT>::value;\u000A\u000A//\u000A// Streams data from 'in_ptr' into 'Pipe', 'elements_per_cycle' elements at a\u000A// time\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, typename PtrT>\u000Avoid MemoryToPipeRemainder(PtrT in_ptr, size_t full_count,\u000A                           size_t remainder_count) {\u000A  static_assert(fpga_tools::is_sycl_pipe_v<Pipe>);\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PipeT>);\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(PipeT::size == elements_per_cycle);\u000A  static_assert(pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < full_count; i++) {\u000A    PipeT pipe_data;\u000A#pragma unroll\u000A    for (int j = 0; j < elements_per_cycle; j++) {\u000A      pipe_data[j] = in_ptr[i * elements_per_cycle + j];\u000A    }\u000A    Pipe::write(pipe_data);\u000A  }\u000A\u000A  PipeT pipe_data;\u000A  for (size_t i = 0; i < remainder_count; i++) {\u000A    pipe_data[i] = in_ptr[full_count * elements_per_cycle + i];\u000A  }\u000A  Pipe::write(pipe_data);\u000A}\u000A\u000A//\u000A// Streams data from 'in_ptr' into 'Pipe', 'elements_per_cycle' elements at a\u000A// time with the guarantee that 'elements_per_cycle' is a multiple of 'count'\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, typename PtrT>\u000Avoid MemoryToPipeNoRemainder(PtrT in_ptr, size_t count) {\u000A  static_assert(fpga_tools::is_sycl_pipe_v<Pipe>);\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PipeT>);\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(PipeT::size == elements_per_cycle);\u000A  static_assert(pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < count; i++) {\u000A    PipeT pipe_data;\u000A#pragma unroll\u000A    for (int j = 0; j < elements_per_cycle; j++) {\u000A      pipe_data[j] = in_ptr[i * elements_per_cycle + j];\u000A    }\u000A    Pipe::write(pipe_data);\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from 'Pipe' to 'out_ptr', 'elements_per_cycle' elements at a\u000A// time\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, typename PtrT>\u000Avoid PipeToMemoryRemainder(PtrT out_ptr, size_t full_count,\u000A                           size_t remainder_count) {\u000A  static_assert(fpga_tools::is_sycl_pipe_v<Pipe>);\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PipeT>);\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(PipeT::size == elements_per_cycle);\u000A  static_assert(pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < full_count; i++) {\u000A    auto pipe_data = Pipe::read();\u000A#pragma unroll\u000A    for (int j = 0; j < elements_per_cycle; j++) {\u000A      out_ptr[i * elements_per_cycle + j] = pipe_data[j];\u000A    }\u000A  }\u000A\u000A  auto pipe_data = Pipe::read();\u000A  for (size_t i = 0; i < remainder_count; i++) {\u000A    out_ptr[full_count * elements_per_cycle + i] = pipe_data[i];\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from 'Pipe' to 'out_ptr', 'elements_per_cycle' elements at a\u000A// time with the guarantee that 'elements_per_cycle' is a multiple of 'count'\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, typename PtrT>\u000Avoid PipeToMemoryNoRemainder(PtrT out_ptr, size_t count) {\u000A  static_assert(fpga_tools::is_sycl_pipe_v<Pipe>);\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PipeT>);\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(PipeT::size == elements_per_cycle);\u000A  static_assert(pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < count; i++) {\u000A    auto pipe_data = Pipe::read();\u000A#pragma unroll\u000A    for (int j = 0; j < elements_per_cycle; j++) {\u000A      out_ptr[i * elements_per_cycle + j] = pipe_data[j];\u000A    }\u000A  }\u000A}\u000A\u000A}  // namespace detail\u000A\u000A//\u000A// Streams data from memory to a SYCL pipe 1 element a time\u000A//\u000Atemplate <typename Pipe, typename PtrT>\u000Avoid MemoryToPipe(PtrT in_ptr, size_t count) {\u000A  static_assert(fpga_tools::is_sycl_pipe_v<Pipe>);\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(detail::pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < count; i++) {\u000A    Pipe::write(in_ptr[i]);\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from memory to a SYCL pipe 'elements_per_cycle' elements a time\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, bool remainder, typename PtrT>\u000Avoid MemoryToPipe(PtrT in_ptr, size_t count) {\u000A  if constexpr (!remainder) {\u000A    // user promises there is not remainder\u000A    detail::MemoryToPipeNoRemainder<Pipe, elements_per_cycle>(in_ptr, count);\u000A  } else {\u000A    // might have a remainder and it was not specified, so calculate it\u000A    auto full_count = (count / elements_per_cycle) * elements_per_cycle;\u000A    auto remainder_count = count % elements_per_cycle;\u000A    detail::MemoryToPipeRemainder<Pipe, elements_per_cycle>(in_ptr, full_count,\u000A                                                            remainder_count);\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from memory to a SYCL pipe 'elements_per_cycle' elements a time\u000A// In this version, the user has specified a the amount of remainder\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, bool remainder, typename PtrT>\u000Avoid MemoryToPipe(PtrT in_ptr, size_t full_count, size_t remainder_count) {\u000A  if constexpr (!remainder) {\u000A    // user promises there is not remainder\u000A    detail::MemoryToPipeNoRemainder<Pipe, elements_per_cycle>(in_ptr,\u000A                                                              full_count);\u000A  } else {\u000A    // might have a remainder that was specified by the user\u000A    detail::MemoryToPipeRemainder<Pipe, elements_per_cycle>(in_ptr, full_count,\u000A                                                            remainder_count);\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from a SYCL pipe to memory 1 element a time\u000A//\u000Atemplate <typename Pipe, typename PtrT>\u000Avoid PipeToMemory(PtrT out_ptr, size_t count) {\u000A  using PipeT = decltype(Pipe::read());\u000A  static_assert(fpga_tools::has_subscript_v<PtrT>);\u000A  static_assert(detail::pipe_and_pointer_have_same_base_v<PipeT, PtrT>);\u000A\u000A  for (size_t i = 0; i < count; i++) {\u000A    out_ptr[i] = Pipe::read();\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from a SYCL pipe to memory 'elements_per_cycle' elements a time\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, bool remainder, typename PtrT>\u000Avoid PipeToMemory(PtrT out_ptr, size_t count) {\u000A  if constexpr (!remainder) {\u000A    detail::PipeToMemoryNoRemainder<Pipe, elements_per_cycle>(out_ptr, count);\u000A  } else {\u000A    auto full_count = (count / elements_per_cycle) * elements_per_cycle;\u000A    auto remainder_count = count % elements_per_cycle;\u000A    detail::PipeToMemoryRemainder<Pipe, elements_per_cycle>(out_ptr, full_count,\u000A                                                            remainder_count);\u000A  }\u000A}\u000A\u000A//\u000A// Streams data from a SYCL pipe to memory 'elements_per_cycle' elements a time\u000A// In this version, the user has specified a the amount of remainder\u000A//\u000Atemplate <typename Pipe, int elements_per_cycle, bool remainder, typename PtrT>\u000Avoid PipeToMemory(PtrT out_ptr, size_t full_count, size_t remainder_count) {\u000A  if constexpr (!remainder) {\u000A    detail::PipeToMemoryNoRemainder<Pipe, elements_per_cycle>(out_ptr,\u000A                                                              full_count);\u000A  } else {\u000A    detail::PipeToMemoryRemainder<Pipe, elements_per_cycle>(out_ptr, full_count,\u000A                                                            remainder_count);\u000A  }\u000A}\u000A\u000A\u000A/// 1. Allocate device_memory (same num bytes as in host_vector)\u000A/// 2. Transfer data host_vector->device_memory\u000A/// 3. Return sycl::device_ptr to device_memory\u000Atemplate<typename T>\u000AT* toDevice(const std::vector<T> &host_vector, sycl::queue &q) {\u000A  T* device_data = sycl::malloc_device<T>(host_vector.size(), q);\u000A  q.copy(host_vector.data(), device_data, host_vector.size()).wait();\u000A  return device_data;\u000A}\u000Atemplate<typename T, int N>\u000AT* toDevice(const T* host_array[N], sycl::queue &q) {\u000A  T* device_data = sycl::malloc_device<T>(N, q);\u000A  q.copy(host_array, device_data, N).wait();\u000A  return device_data;\u000A}\u000Atemplate<typename T>\u000AT* toDevice(const T* host_array, const int N, sycl::queue &q) {\u000A  T* device_data = sycl::malloc_device<T>(N, q);\u000A  q.copy(host_array, device_data, N).wait();\u000A  return device_data;\u000A}\u000A\u000A}  // namespace fpga_tools\u000A\u000A#endif /* __MEMORY_UTILS_HPP__ */"}, {"path":"/home/u119070/git/elastic-sycl-hls/include_sycl/metaprogramming_utils.hpp", "name":"metaprogramming_utils.hpp", "has_active_debug_locs":false, "absName":"/home/u119070/git/elastic-sycl-hls/include_sycl/metaprogramming_utils.hpp", "content":"#ifndef __METAPROGRAMMING_UTILS_HPP__\u000A#define __METAPROGRAMMING_UTILS_HPP__\u000A\u000A#include <type_traits>\u000A#include <utility>\u000A\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A\u000Anamespace fpga_tools {\u000A\u000A//\u000A// The code below creates the constexprs 'make_integer_range'\u000A// and 'make_index_range' these are akin to 'std::make_integer_sequence'\u000A// and 'std::make_index_sequence', respectively.\u000A// However they allow you to specificy a range and can either increment\u000A// or decrement, rather than a strict increasing sequence\u000A//\u000Atemplate <typename T, typename, T begin, bool increase>\u000Astruct integer_range_impl;\u000A\u000A// incrementing case\u000Atemplate <typename T, T... N, T begin>\u000Astruct integer_range_impl<T, std::integer_sequence<T, N...>, begin, true> {\u000A  using type = std::integer_sequence<T, N + begin...>;\u000A};\u000A\u000A// decrementing case\u000Atemplate <typename T, T... N, T begin>\u000Astruct integer_range_impl<T, std::integer_sequence<T, N...>, begin, false> {\u000A  using type = std::integer_sequence<T, begin - N...>;\u000A};\u000A\u000A// integer_range\u000Atemplate <typename T, T begin, T end>\u000Ausing integer_range = typename integer_range_impl<\u000A    T, std::make_integer_sequence<T, (begin < end) ? end - begin : begin - end>,\u000A    begin, (begin < end)>::type;\u000A\u000A//\u000A// make_integer_range\u000A//\u000A// USAGE:\u000A//    make_integer_range<int,1,10>{} ==> 1,2,...,9\u000A//    make_integer_range<int,10,1>{} ==> 10,9,...,2\u000A//\u000Atemplate <class T, T begin, T end>\u000Ausing make_integer_range = integer_range<T, begin, end>;\u000A\u000A//\u000A// make_index_range\u000A//\u000A// USAGE:\u000A//    make_index_range<1,10>{} ==> 1,2,...,9\u000A//    make_index_range<10,1>{} ==> 10,9,...,2\u000A//\u000Atemplate <std::size_t begin, std::size_t end>\u000Ausing make_index_range = integer_range<std::size_t, begin, end>;\u000A\u000A//\u000A// The code below creates the constexprs 'make_integer_pow2_sequence'\u000A// and 'make_index_pow2_sequence'. These generate the sequence\u000A// 2^0, 2^1, 2^2, ... , 2^(N-1) = 1,2,4,...,2^(N-1)\u000A//\u000Atemplate <typename T, typename>\u000Astruct integer_pow2_sequence_impl;\u000A\u000Atemplate <typename T, T... Pows>\u000Astruct integer_pow2_sequence_impl<T, std::integer_sequence<T, Pows...>> {\u000A  using type = std::integer_sequence<T, (T(1) << Pows)...>;\u000A};\u000A\u000A// integer_pow2_sequence\u000Atemplate <typename T, T N>\u000Ausing integer_pow2_sequence =\u000A    typename integer_pow2_sequence_impl<T,\u000A                                        std::make_integer_sequence<T, N>>::type;\u000A\u000A//\u000A// make_integer_pow2_sequence\u000A//\u000A// USAGE:\u000A//    make_integer_pow2_sequence<int,5>{} ==> 1,2,4,8,16\u000A//\u000Atemplate <class T, T N>\u000Ausing make_integer_pow2_sequence = integer_pow2_sequence<T, N>;\u000A\u000A//\u000A// make_index_pow2_sequence\u000A//\u000A// USAGE:\u000A//    make_index_pow2_sequence<5>{} ==> 1,2,4,8,16\u000A//\u000Atemplate <std::size_t N>\u000Ausing make_index_pow2_sequence = integer_pow2_sequence<std::size_t, N>;\u000A\u000A//\u000A// Checks for existence of subscript operator\u000A//\u000Anamespace detail {\u000Atemplate <typename... >\u000Ausing void_t = void;\u000A\u000Atemplate<class T, typename = void>\u000Astruct has_subscript_impl : std::false_type { };\u000A\u000Atemplate<typename T>\u000Astruct has_subscript_impl<T, void_t<decltype(std::declval<T>()[1])>> \u000A  : std::true_type { };\u000A}  // namespace detail\u000A\u000Atemplate <typename T>\u000Astruct has_subscript {\u000A  static constexpr bool value =\u000A    std::is_same_v<typename detail::has_subscript_impl<T>::type, std::true_type>;\u000A};\u000A\u000Atemplate <typename T>\u000Ainline constexpr bool has_subscript_v = has_subscript<T>::value;\u000A\u000A//\u000A// checks if a type is any instance of SYCL pipe\u000A//\u000Anamespace detail {\u000A\u000Atemplate<typename T>\u000Astruct is_sycl_pipe_impl : std::false_type {};\u000A\u000Atemplate<typename Id, typename T, std::size_t N>\u000Astruct is_sycl_pipe_impl<sycl::ext::intel::pipe<Id, T, N>> : std::true_type {};\u000A\u000A}  // namespace detail\u000A\u000Atemplate <typename T>\u000Astruct is_sycl_pipe {\u000A  static constexpr bool value = detail::is_sycl_pipe_impl<T>{};\u000A};\u000A\u000Atemplate <typename T>\u000Ainline constexpr bool is_sycl_pipe_v = is_sycl_pipe<T>::value;\u000A\u000A} // namespace fpga_tools\u000A\u000A#endif  /* __METAPROGRAMMING_UTILS_HPP__ */"}];
var alpha_viewer=false;