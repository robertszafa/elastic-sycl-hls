// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "loop_imperfect.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic loop_imperfect::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic loop_imperfect::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> loop_imperfect::ap_ST_fsm_state1 = "1";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state2 = "10";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state3 = "100";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state4 = "1000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state5 = "10000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state6 = "100000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_1 = "1";
const sc_lv<1> loop_imperfect::ap_const_lv1_0 = "0";
const sc_lv<32> loop_imperfect::ap_const_lv32_2 = "10";
const sc_lv<32> loop_imperfect::ap_const_lv32_6 = "110";
const sc_lv<32> loop_imperfect::ap_const_lv32_A = "1010";
const sc_lv<32> loop_imperfect::ap_const_lv32_E = "1110";
const sc_lv<32> loop_imperfect::ap_const_lv32_12 = "10010";
const sc_lv<32> loop_imperfect::ap_const_lv32_16 = "10110";
const sc_lv<32> loop_imperfect::ap_const_lv32_1A = "11010";
const sc_lv<10> loop_imperfect::ap_const_lv10_0 = "0000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_1E = "11110";
const sc_lv<10> loop_imperfect::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> loop_imperfect::ap_const_lv10_1 = "1";
const sc_lv<32> loop_imperfect::ap_const_lv32_70 = "1110000";
const sc_lv<32> loop_imperfect::ap_const_lv32_17 = "10111";
const sc_lv<32> loop_imperfect::ap_const_lv32_24 = "100100";
const sc_lv<32> loop_imperfect::ap_const_lv32_52 = "1010010";
const sc_lv<32> loop_imperfect::ap_const_lv32_7F = "1111111";
const sc_lv<32> loop_imperfect::ap_const_lv32_14 = "10100";
const sc_lv<32> loop_imperfect::ap_const_lv32_64 = "1100100";
const sc_lv<32> loop_imperfect::ap_const_lv32_1F = "11111";
const bool loop_imperfect::ap_const_boolean_1 = true;

loop_imperfect::loop_imperfect(sc_module_name name) : sc_module(name), mVcdFile(0) {
    loop_imperfect_mubkb_U1 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U1");
    loop_imperfect_mubkb_U1->clk(ap_clk);
    loop_imperfect_mubkb_U1->reset(ap_rst);
    loop_imperfect_mubkb_U1->din0(A_q0);
    loop_imperfect_mubkb_U1->din1(grp_fu_123_p1);
    loop_imperfect_mubkb_U1->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U1->dout(grp_fu_123_p2);
    loop_imperfect_mubkb_U2 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U2");
    loop_imperfect_mubkb_U2->clk(ap_clk);
    loop_imperfect_mubkb_U2->reset(ap_rst);
    loop_imperfect_mubkb_U2->din0(d_reg_224);
    loop_imperfect_mubkb_U2->din1(grp_fu_135_p1);
    loop_imperfect_mubkb_U2->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U2->dout(grp_fu_135_p2);
    loop_imperfect_mubkb_U3 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U3");
    loop_imperfect_mubkb_U3->clk(ap_clk);
    loop_imperfect_mubkb_U3->reset(ap_rst);
    loop_imperfect_mubkb_U3->din0(d_reg_224);
    loop_imperfect_mubkb_U3->din1(grp_fu_146_p1);
    loop_imperfect_mubkb_U3->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U3->dout(grp_fu_146_p2);
    loop_imperfect_mubkb_U4 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U4");
    loop_imperfect_mubkb_U4->clk(ap_clk);
    loop_imperfect_mubkb_U4->reset(ap_rst);
    loop_imperfect_mubkb_U4->din0(d_reg_224);
    loop_imperfect_mubkb_U4->din1(grp_fu_157_p1);
    loop_imperfect_mubkb_U4->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U4->dout(grp_fu_157_p2);
    loop_imperfect_mubkb_U5 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U5");
    loop_imperfect_mubkb_U5->clk(ap_clk);
    loop_imperfect_mubkb_U5->reset(ap_rst);
    loop_imperfect_mubkb_U5->din0(d_reg_224);
    loop_imperfect_mubkb_U5->din1(grp_fu_168_p1);
    loop_imperfect_mubkb_U5->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U5->dout(grp_fu_168_p2);
    loop_imperfect_mubkb_U6 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U6");
    loop_imperfect_mubkb_U6->clk(ap_clk);
    loop_imperfect_mubkb_U6->reset(ap_rst);
    loop_imperfect_mubkb_U6->din0(d_reg_224);
    loop_imperfect_mubkb_U6->din1(grp_fu_179_p1);
    loop_imperfect_mubkb_U6->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U6->dout(grp_fu_179_p2);
    loop_imperfect_mubkb_U7 = new loop_imperfect_mubkb<1,5,32,32,32>("loop_imperfect_mubkb_U7");
    loop_imperfect_mubkb_U7->clk(ap_clk);
    loop_imperfect_mubkb_U7->reset(ap_rst);
    loop_imperfect_mubkb_U7->din0(d_reg_224);
    loop_imperfect_mubkb_U7->din1(grp_fu_190_p1);
    loop_imperfect_mubkb_U7->ce(ap_var_for_const0);
    loop_imperfect_mubkb_U7->dout(grp_fu_190_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( zext_ln98_fu_111_p1 );
    sensitive << ( sext_ln99_fu_202_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_A_d0);
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_fu_190_p2 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_add_ln99_fu_117_p0);
    sensitive << ( A_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln98_fu_111_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_123_p1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( add_ln99_fu_117_p0 );

    SC_METHOD(thread_grp_fu_135_p1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_fu_123_p2 );

    SC_METHOD(thread_grp_fu_146_p1);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_fu_135_p2 );

    SC_METHOD(thread_grp_fu_157_p1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fu_146_p2 );

    SC_METHOD(thread_grp_fu_168_p1);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( grp_fu_157_p2 );

    SC_METHOD(thread_grp_fu_179_p1);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_fu_168_p2 );

    SC_METHOD(thread_grp_fu_190_p1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( grp_fu_179_p2 );

    SC_METHOD(thread_i_fu_105_p2);
    sensitive << ( i_0_reg_88 );

    SC_METHOD(thread_icmp_ln96_fu_99_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_88 );

    SC_METHOD(thread_sext_ln99_fu_202_p1);
    sensitive << ( b_load_reg_240 );

    SC_METHOD(thread_zext_ln98_fu_111_p1);
    sensitive << ( i_0_reg_88 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln96_fu_99_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "loop_imperfect_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_105_p2, "i_fu_105_p2");
    sc_trace(mVcdFile, i_reg_209, "i_reg_209");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln96_fu_99_p2, "icmp_ln96_fu_99_p2");
    sc_trace(mVcdFile, d_reg_224, "d_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, b_load_reg_240, "b_load_reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, i_0_reg_88, "i_0_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, zext_ln98_fu_111_p1, "zext_ln98_fu_111_p1");
    sc_trace(mVcdFile, sext_ln99_fu_202_p1, "sext_ln99_fu_202_p1");
    sc_trace(mVcdFile, add_ln99_fu_117_p0, "add_ln99_fu_117_p0");
    sc_trace(mVcdFile, grp_fu_123_p1, "grp_fu_123_p1");
    sc_trace(mVcdFile, grp_fu_123_p2, "grp_fu_123_p2");
    sc_trace(mVcdFile, grp_fu_135_p1, "grp_fu_135_p1");
    sc_trace(mVcdFile, grp_fu_135_p2, "grp_fu_135_p2");
    sc_trace(mVcdFile, grp_fu_146_p1, "grp_fu_146_p1");
    sc_trace(mVcdFile, grp_fu_146_p2, "grp_fu_146_p2");
    sc_trace(mVcdFile, grp_fu_157_p1, "grp_fu_157_p1");
    sc_trace(mVcdFile, grp_fu_157_p2, "grp_fu_157_p2");
    sc_trace(mVcdFile, grp_fu_168_p1, "grp_fu_168_p1");
    sc_trace(mVcdFile, grp_fu_168_p2, "grp_fu_168_p2");
    sc_trace(mVcdFile, grp_fu_179_p1, "grp_fu_179_p1");
    sc_trace(mVcdFile, grp_fu_179_p2, "grp_fu_179_p2");
    sc_trace(mVcdFile, grp_fu_190_p1, "grp_fu_190_p1");
    sc_trace(mVcdFile, grp_fu_190_p2, "grp_fu_190_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("loop_imperfect.hdltvin.dat");
    mHdltvoutHandle.open("loop_imperfect.hdltvout.dat");
}

loop_imperfect::~loop_imperfect() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete loop_imperfect_mubkb_U1;
    delete loop_imperfect_mubkb_U2;
    delete loop_imperfect_mubkb_U3;
    delete loop_imperfect_mubkb_U4;
    delete loop_imperfect_mubkb_U5;
    delete loop_imperfect_mubkb_U6;
    delete loop_imperfect_mubkb_U7;
}

void loop_imperfect::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void loop_imperfect::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        i_0_reg_88 = i_reg_209.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_88 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_load_reg_240 = b_q0.read();
        d_reg_224 = A_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_209 = i_fu_105_p2.read();
    }
}

void loop_imperfect::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        A_address0 =  (sc_lv<10>) (sext_ln99_fu_202_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        A_address0 =  (sc_lv<10>) (zext_ln98_fu_111_p1.read());
    } else {
        A_address0 = "XXXXXXXXXX";
    }
}

void loop_imperfect::thread_A_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_A_d0() {
    A_d0 = (!grp_fu_190_p2.read().is_01() || !ap_const_lv32_64.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_190_p2.read()) + sc_biguint<32>(ap_const_lv32_64));
}

void loop_imperfect::thread_A_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_add_ln99_fu_117_p0() {
    add_ln99_fu_117_p0 = A_q0.read();
}

void loop_imperfect::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void loop_imperfect::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void loop_imperfect::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void loop_imperfect::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void loop_imperfect::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void loop_imperfect::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void loop_imperfect::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void loop_imperfect::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void loop_imperfect::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void loop_imperfect::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void loop_imperfect::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void loop_imperfect::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void loop_imperfect::thread_b_address0() {
    b_address0 =  (sc_lv<10>) (zext_ln98_fu_111_p1.read());
}

void loop_imperfect::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_grp_fu_123_p1() {
    grp_fu_123_p1 = (!add_ln99_fu_117_p0.read().is_01() || !ap_const_lv32_70.is_01())? sc_lv<32>(): (sc_bigint<32>(add_ln99_fu_117_p0.read()) + sc_biguint<32>(ap_const_lv32_70));
}

void loop_imperfect::thread_grp_fu_135_p1() {
    grp_fu_135_p1 = (!grp_fu_123_p2.read().is_01() || !ap_const_lv32_17.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_123_p2.read()) + sc_biguint<32>(ap_const_lv32_17));
}

void loop_imperfect::thread_grp_fu_146_p1() {
    grp_fu_146_p1 = (!grp_fu_135_p2.read().is_01() || !ap_const_lv32_24.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_135_p2.read()) + sc_biguint<32>(ap_const_lv32_24));
}

void loop_imperfect::thread_grp_fu_157_p1() {
    grp_fu_157_p1 = (!grp_fu_146_p2.read().is_01() || !ap_const_lv32_52.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_146_p2.read()) + sc_biguint<32>(ap_const_lv32_52));
}

void loop_imperfect::thread_grp_fu_168_p1() {
    grp_fu_168_p1 = (!grp_fu_157_p2.read().is_01() || !ap_const_lv32_7F.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_157_p2.read()) + sc_biguint<32>(ap_const_lv32_7F));
}

void loop_imperfect::thread_grp_fu_179_p1() {
    grp_fu_179_p1 = (!grp_fu_168_p2.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_168_p2.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void loop_imperfect::thread_grp_fu_190_p1() {
    grp_fu_190_p1 = (!grp_fu_179_p2.read().is_01() || !ap_const_lv32_14.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_179_p2.read()) + sc_biguint<32>(ap_const_lv32_14));
}

void loop_imperfect::thread_i_fu_105_p2() {
    i_fu_105_p2 = (!i_0_reg_88.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_reg_88.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void loop_imperfect::thread_icmp_ln96_fu_99_p2() {
    icmp_ln96_fu_99_p2 = (!i_0_reg_88.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_88.read() == ap_const_lv10_3E8);
}

void loop_imperfect::thread_sext_ln99_fu_202_p1() {
    sext_ln99_fu_202_p1 = esl_sext<64,32>(b_load_reg_240.read());
}

void loop_imperfect::thread_zext_ln98_fu_111_p1() {
    zext_ln98_fu_111_p1 = esl_zext<64,10>(i_0_reg_88.read());
}

void loop_imperfect::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln96_fu_99_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void loop_imperfect::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

