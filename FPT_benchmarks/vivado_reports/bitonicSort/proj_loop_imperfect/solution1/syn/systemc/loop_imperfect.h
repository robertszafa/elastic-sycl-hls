// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _loop_imperfect_HH_
#define _loop_imperfect_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct loop_imperfect : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_out< sc_logic > A_we0;
    sc_out< sc_lv<32> > A_d0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<6> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_out< sc_logic > A_we1;
    sc_out< sc_lv<32> > A_d1;
    sc_in< sc_lv<32> > A_q1;


    // Module declarations
    loop_imperfect(sc_module_name name);
    SC_HAS_PROCESS(loop_imperfect);

    ~loop_imperfect();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > trunc_ln96_fu_119_p1;
    sc_signal< sc_lv<6> > trunc_ln96_reg_242;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln96_fu_113_p2;
    sc_signal< sc_lv<1> > icmp_ln99_fu_133_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > j_fu_139_p1;
    sc_signal< sc_lv<32> > j_reg_251;
    sc_signal< sc_lv<30> > trunc_ln99_1_reg_256;
    sc_signal< sc_lv<32> > k_fu_153_p2;
    sc_signal< sc_lv<1> > icmp_ln102_fu_159_p2;
    sc_signal< sc_lv<1> > icmp_ln102_reg_266;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > i_fu_165_p2;
    sc_signal< sc_lv<7> > i_reg_270;
    sc_signal< sc_lv<1> > icmp_ln107_fu_184_p2;
    sc_signal< sc_lv<1> > icmp_ln107_reg_275;
    sc_signal< sc_lv<6> > A_addr_reg_279;
    sc_signal< sc_lv<6> > A_addr_1_reg_284;
    sc_signal< sc_lv<6> > and_ln112_fu_200_p2;
    sc_signal< sc_lv<6> > and_ln112_reg_289;
    sc_signal< sc_lv<32> > Ai_reg_295;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > and_ln112_1_fu_216_p2;
    sc_signal< sc_lv<1> > and_ln112_1_reg_300;
    sc_signal< sc_lv<1> > and_ln112_2_fu_233_p2;
    sc_signal< sc_lv<1> > and_ln112_2_reg_304;
    sc_signal< sc_lv<32> > k_0_reg_80;
    sc_signal< sc_lv<32> > j_0_in_reg_92;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<7> > i_0_reg_102;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln108_fu_190_p1;
    sc_signal< sc_lv<64> > zext_ln109_fu_195_p1;
    sc_signal< sc_lv<31> > trunc_ln1_fu_123_p4;
    sc_signal< sc_lv<30> > zext_ln102_fu_175_p1;
    sc_signal< sc_lv<30> > l_fu_179_p2;
    sc_signal< sc_lv<6> > trunc_ln102_fu_171_p1;
    sc_signal< sc_lv<1> > icmp_ln112_fu_205_p2;
    sc_signal< sc_lv<1> > icmp_ln112_1_fu_210_p2;
    sc_signal< sc_lv<1> > icmp_ln112_2_fu_222_p2;
    sc_signal< sc_lv<1> > icmp_ln112_3_fu_228_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_41;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_A_d0();
    void thread_A_d1();
    void thread_A_we0();
    void thread_A_we1();
    void thread_and_ln112_1_fu_216_p2();
    void thread_and_ln112_2_fu_233_p2();
    void thread_and_ln112_fu_200_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_165_p2();
    void thread_icmp_ln102_fu_159_p2();
    void thread_icmp_ln107_fu_184_p2();
    void thread_icmp_ln112_1_fu_210_p2();
    void thread_icmp_ln112_2_fu_222_p2();
    void thread_icmp_ln112_3_fu_228_p2();
    void thread_icmp_ln112_fu_205_p2();
    void thread_icmp_ln96_fu_113_p2();
    void thread_icmp_ln99_fu_133_p2();
    void thread_j_fu_139_p1();
    void thread_k_fu_153_p2();
    void thread_l_fu_179_p2();
    void thread_trunc_ln102_fu_171_p1();
    void thread_trunc_ln1_fu_123_p4();
    void thread_trunc_ln96_fu_119_p1();
    void thread_zext_ln102_fu_175_p1();
    void thread_zext_ln108_fu_190_p1();
    void thread_zext_ln109_fu_195_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
