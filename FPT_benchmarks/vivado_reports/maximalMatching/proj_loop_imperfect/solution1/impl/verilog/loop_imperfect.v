// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.664000,HLS_SYN_LAT=6001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=114,HLS_SYN_LUT=141,HLS_VERSION=2019_2}" *)

module loop_imperfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vertices_address0,
        vertices_ce0,
        vertices_we0,
        vertices_d0,
        vertices_q0,
        vertices_address1,
        vertices_ce1,
        vertices_we1,
        vertices_d1,
        vertices_q1,
        edges_address0,
        edges_ce0,
        edges_q0,
        edges_address1,
        edges_ce1,
        edges_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] vertices_address0;
output   vertices_ce0;
output   vertices_we0;
output  [31:0] vertices_d0;
input  [31:0] vertices_q0;
output  [10:0] vertices_address1;
output   vertices_ce1;
output   vertices_we1;
output  [31:0] vertices_d1;
input  [31:0] vertices_q1;
output  [10:0] edges_address0;
output   edges_ce0;
input  [31:0] edges_q0;
output  [10:0] edges_address1;
output   edges_ce1;
input  [31:0] edges_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vertices_ce0;
reg vertices_we0;
reg vertices_ce1;
reg vertices_we1;
reg edges_ce0;
reg edges_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_fu_95_p2;
reg   [9:0] i_reg_148;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln99_fu_89_p2;
reg   [10:0] vertices_addr_reg_163;
wire    ap_CS_fsm_state3;
reg   [10:0] vertices_addr_1_reg_168;
reg   [31:0] v1_reg_173;
wire    ap_CS_fsm_state5;
reg   [31:0] v2_reg_179;
wire   [0:0] icmp_ln108_fu_139_p2;
reg   [0:0] icmp_ln108_reg_185;
wire    ap_CS_fsm_state6;
reg   [9:0] i_0_reg_78;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln102_fu_109_p1;
wire   [63:0] zext_ln103_fu_120_p1;
wire  signed [63:0] sext_ln105_fu_125_p1;
wire  signed [63:0] sext_ln106_fu_130_p1;
wire    ap_CS_fsm_state4;
wire   [10:0] j_fu_101_p3;
wire   [10:0] or_ln103_fu_114_p2;
wire   [31:0] or_ln108_fu_135_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_78 <= i_reg_148;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_78 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_148 <= i_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln108_reg_185 <= icmp_ln108_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v1_reg_173 <= vertices_q0;
        v2_reg_179 <= vertices_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vertices_addr_1_reg_168 <= sext_ln106_fu_130_p1;
        vertices_addr_reg_163 <= sext_ln105_fu_125_p1;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        edges_ce0 = 1'b1;
    end else begin
        edges_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        edges_ce1 = 1'b1;
    end else begin
        edges_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        vertices_ce0 = 1'b1;
    end else begin
        vertices_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        vertices_ce1 = 1'b1;
    end else begin
        vertices_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        vertices_we0 = 1'b1;
    end else begin
        vertices_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_185 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        vertices_we1 = 1'b1;
    end else begin
        vertices_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln99_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign edges_address0 = zext_ln102_fu_109_p1;

assign edges_address1 = zext_ln103_fu_120_p1;

assign i_fu_95_p2 = (i_0_reg_78 + 10'd1);

assign icmp_ln108_fu_139_p2 = ((or_ln108_fu_135_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_89_p2 = ((i_0_reg_78 == 10'd1000) ? 1'b1 : 1'b0);

assign j_fu_101_p3 = {{i_0_reg_78}, {1'd0}};

assign or_ln103_fu_114_p2 = (j_fu_101_p3 | 11'd1);

assign or_ln108_fu_135_p2 = (v2_reg_179 | v1_reg_173);

assign sext_ln105_fu_125_p1 = $signed(edges_q0);

assign sext_ln106_fu_130_p1 = $signed(edges_q1);

assign vertices_address0 = vertices_addr_reg_163;

assign vertices_address1 = vertices_addr_1_reg_168;

assign vertices_d0 = v2_reg_179;

assign vertices_d1 = v1_reg_173;

assign zext_ln102_fu_109_p1 = j_fu_101_p3;

assign zext_ln103_fu_120_p1 = or_ln103_fu_114_p2;

endmodule //loop_imperfect
