// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.483000,HLS_SYN_LAT=30002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=1621,HLS_SYN_LUT=522,HLS_VERSION=2019_2}" *)

module loop_imperfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        b_address0,
        b_ce0,
        b_q0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] A_address0;
reg A_ce0;
reg A_we0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_fu_105_p2;
reg   [9:0] i_reg_209;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln96_fu_99_p2;
reg  signed [31:0] d_reg_224;
wire    ap_CS_fsm_state3;
reg   [31:0] b_load_reg_240;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
reg   [9:0] i_0_reg_88;
wire    ap_CS_fsm_state31;
wire   [63:0] zext_ln98_fu_111_p1;
wire  signed [63:0] sext_ln99_fu_202_p1;
wire  signed [31:0] add_ln99_fu_117_p0;
wire  signed [31:0] grp_fu_123_p1;
wire   [31:0] grp_fu_123_p2;
wire  signed [31:0] grp_fu_135_p1;
wire   [31:0] grp_fu_135_p2;
wire  signed [31:0] grp_fu_146_p1;
wire   [31:0] grp_fu_146_p2;
wire  signed [31:0] grp_fu_157_p1;
wire   [31:0] grp_fu_157_p2;
wire  signed [31:0] grp_fu_168_p1;
wire   [31:0] grp_fu_168_p2;
wire  signed [31:0] grp_fu_179_p1;
wire   [31:0] grp_fu_179_p2;
wire  signed [31:0] grp_fu_190_p1;
wire   [31:0] grp_fu_190_p2;
wire    ap_CS_fsm_state32;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(grp_fu_123_p1),
    .ce(1'b1),
    .dout(grp_fu_123_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_135_p1),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_146_p1),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_168_p1),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_179_p1),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

loop_imperfect_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
loop_imperfect_mubkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(d_reg_224),
    .din1(grp_fu_190_p1),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_0_reg_88 <= i_reg_209;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_88 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_load_reg_240 <= b_q0;
        d_reg_224 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_209 <= i_fu_105_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        A_address0 = sext_ln99_fu_202_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln98_fu_111_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state31))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln96_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = (grp_fu_190_p2 + 32'd100);

assign add_ln99_fu_117_p0 = A_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign b_address0 = zext_ln98_fu_111_p1;

assign grp_fu_123_p1 = ($signed(add_ln99_fu_117_p0) + $signed(32'd112));

assign grp_fu_135_p1 = (grp_fu_123_p2 + 32'd23);

assign grp_fu_146_p1 = (grp_fu_135_p2 + 32'd36);

assign grp_fu_157_p1 = (grp_fu_146_p2 + 32'd82);

assign grp_fu_168_p1 = (grp_fu_157_p2 + 32'd127);

assign grp_fu_179_p1 = (grp_fu_168_p2 + 32'd2);

assign grp_fu_190_p1 = (grp_fu_179_p2 + 32'd20);

assign i_fu_105_p2 = (i_0_reg_88 + 10'd1);

assign icmp_ln96_fu_99_p2 = ((i_0_reg_88 == 10'd1000) ? 1'b1 : 1'b0);

assign sext_ln99_fu_202_p1 = $signed(b_load_reg_240);

assign zext_ln98_fu_111_p1 = i_0_reg_88;

endmodule //loop_imperfect
