// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "loop_imperfect.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic loop_imperfect::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic loop_imperfect::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> loop_imperfect::ap_ST_fsm_state1 = "1";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state2 = "10";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state3 = "100";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state4 = "1000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state5 = "10000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state6 = "100000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_1 = "1";
const sc_lv<1> loop_imperfect::ap_const_lv1_0 = "0";
const sc_lv<32> loop_imperfect::ap_const_lv32_2 = "10";
const sc_lv<32> loop_imperfect::ap_const_lv32_4 = "100";
const sc_lv<32> loop_imperfect::ap_const_lv32_5 = "101";
const sc_lv<10> loop_imperfect::ap_const_lv10_0 = "0000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_6 = "110";
const sc_lv<32> loop_imperfect::ap_const_lv32_3 = "11";
const sc_lv<1> loop_imperfect::ap_const_lv1_1 = "1";
const sc_lv<10> loop_imperfect::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> loop_imperfect::ap_const_lv10_1 = "1";
const sc_lv<11> loop_imperfect::ap_const_lv11_1 = "1";
const bool loop_imperfect::ap_const_boolean_1 = true;

loop_imperfect::loop_imperfect(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln99_fu_89_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln99_fu_89_p2 );

    SC_METHOD(thread_edges_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln102_fu_109_p1 );

    SC_METHOD(thread_edges_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln103_fu_120_p1 );

    SC_METHOD(thread_edges_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_edges_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_fu_95_p2);
    sensitive << ( i_0_reg_78 );

    SC_METHOD(thread_icmp_ln108_fu_139_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( or_ln108_fu_135_p2 );

    SC_METHOD(thread_icmp_ln99_fu_89_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_78 );

    SC_METHOD(thread_j_fu_101_p3);
    sensitive << ( i_0_reg_78 );

    SC_METHOD(thread_or_ln103_fu_114_p2);
    sensitive << ( j_fu_101_p3 );

    SC_METHOD(thread_or_ln108_fu_135_p2);
    sensitive << ( v1_reg_173 );
    sensitive << ( v2_reg_179 );

    SC_METHOD(thread_sext_ln105_fu_125_p1);
    sensitive << ( edges_q0 );

    SC_METHOD(thread_sext_ln106_fu_130_p1);
    sensitive << ( edges_q1 );

    SC_METHOD(thread_vertices_address0);
    sensitive << ( vertices_addr_reg_163 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_vertices_address1);
    sensitive << ( vertices_addr_1_reg_168 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_vertices_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_vertices_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_vertices_d0);
    sensitive << ( v2_reg_179 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_vertices_d1);
    sensitive << ( v1_reg_173 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_vertices_we0);
    sensitive << ( icmp_ln108_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_vertices_we1);
    sensitive << ( icmp_ln108_reg_185 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_zext_ln102_fu_109_p1);
    sensitive << ( j_fu_101_p3 );

    SC_METHOD(thread_zext_ln103_fu_120_p1);
    sensitive << ( or_ln103_fu_114_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln99_fu_89_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "loop_imperfect_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, vertices_address0, "(port)vertices_address0");
    sc_trace(mVcdFile, vertices_ce0, "(port)vertices_ce0");
    sc_trace(mVcdFile, vertices_we0, "(port)vertices_we0");
    sc_trace(mVcdFile, vertices_d0, "(port)vertices_d0");
    sc_trace(mVcdFile, vertices_q0, "(port)vertices_q0");
    sc_trace(mVcdFile, vertices_address1, "(port)vertices_address1");
    sc_trace(mVcdFile, vertices_ce1, "(port)vertices_ce1");
    sc_trace(mVcdFile, vertices_we1, "(port)vertices_we1");
    sc_trace(mVcdFile, vertices_d1, "(port)vertices_d1");
    sc_trace(mVcdFile, vertices_q1, "(port)vertices_q1");
    sc_trace(mVcdFile, edges_address0, "(port)edges_address0");
    sc_trace(mVcdFile, edges_ce0, "(port)edges_ce0");
    sc_trace(mVcdFile, edges_q0, "(port)edges_q0");
    sc_trace(mVcdFile, edges_address1, "(port)edges_address1");
    sc_trace(mVcdFile, edges_ce1, "(port)edges_ce1");
    sc_trace(mVcdFile, edges_q1, "(port)edges_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_95_p2, "i_fu_95_p2");
    sc_trace(mVcdFile, i_reg_148, "i_reg_148");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln99_fu_89_p2, "icmp_ln99_fu_89_p2");
    sc_trace(mVcdFile, vertices_addr_reg_163, "vertices_addr_reg_163");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, vertices_addr_1_reg_168, "vertices_addr_1_reg_168");
    sc_trace(mVcdFile, v1_reg_173, "v1_reg_173");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, v2_reg_179, "v2_reg_179");
    sc_trace(mVcdFile, icmp_ln108_fu_139_p2, "icmp_ln108_fu_139_p2");
    sc_trace(mVcdFile, icmp_ln108_reg_185, "icmp_ln108_reg_185");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_reg_78, "i_0_reg_78");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, zext_ln102_fu_109_p1, "zext_ln102_fu_109_p1");
    sc_trace(mVcdFile, zext_ln103_fu_120_p1, "zext_ln103_fu_120_p1");
    sc_trace(mVcdFile, sext_ln105_fu_125_p1, "sext_ln105_fu_125_p1");
    sc_trace(mVcdFile, sext_ln106_fu_130_p1, "sext_ln106_fu_130_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_fu_101_p3, "j_fu_101_p3");
    sc_trace(mVcdFile, or_ln103_fu_114_p2, "or_ln103_fu_114_p2");
    sc_trace(mVcdFile, or_ln108_fu_135_p2, "or_ln108_fu_135_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("loop_imperfect.hdltvin.dat");
    mHdltvoutHandle.open("loop_imperfect.hdltvout.dat");
}

loop_imperfect::~loop_imperfect() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void loop_imperfect::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_0_reg_78 = i_reg_148.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_78 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_148 = i_fu_95_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        icmp_ln108_reg_185 = icmp_ln108_fu_139_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        v1_reg_173 = vertices_q0.read();
        v2_reg_179 = vertices_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        vertices_addr_1_reg_168 =  (sc_lv<11>) (sext_ln106_fu_130_p1.read());
        vertices_addr_reg_163 =  (sc_lv<11>) (sext_ln105_fu_125_p1.read());
    }
}

void loop_imperfect::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void loop_imperfect::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void loop_imperfect::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void loop_imperfect::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void loop_imperfect::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void loop_imperfect::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void loop_imperfect::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void loop_imperfect::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln99_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln99_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void loop_imperfect::thread_edges_address0() {
    edges_address0 =  (sc_lv<11>) (zext_ln102_fu_109_p1.read());
}

void loop_imperfect::thread_edges_address1() {
    edges_address1 =  (sc_lv<11>) (zext_ln103_fu_120_p1.read());
}

void loop_imperfect::thread_edges_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        edges_ce0 = ap_const_logic_1;
    } else {
        edges_ce0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_edges_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        edges_ce1 = ap_const_logic_1;
    } else {
        edges_ce1 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_i_fu_95_p2() {
    i_fu_95_p2 = (!i_0_reg_78.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_reg_78.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void loop_imperfect::thread_icmp_ln108_fu_139_p2() {
    icmp_ln108_fu_139_p2 = (!or_ln108_fu_135_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln108_fu_135_p2.read() == ap_const_lv32_0);
}

void loop_imperfect::thread_icmp_ln99_fu_89_p2() {
    icmp_ln99_fu_89_p2 = (!i_0_reg_78.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_78.read() == ap_const_lv10_3E8);
}

void loop_imperfect::thread_j_fu_101_p3() {
    j_fu_101_p3 = esl_concat<10,1>(i_0_reg_78.read(), ap_const_lv1_0);
}

void loop_imperfect::thread_or_ln103_fu_114_p2() {
    or_ln103_fu_114_p2 = (j_fu_101_p3.read() | ap_const_lv11_1);
}

void loop_imperfect::thread_or_ln108_fu_135_p2() {
    or_ln108_fu_135_p2 = (v2_reg_179.read() | v1_reg_173.read());
}

void loop_imperfect::thread_sext_ln105_fu_125_p1() {
    sext_ln105_fu_125_p1 = esl_sext<64,32>(edges_q0.read());
}

void loop_imperfect::thread_sext_ln106_fu_130_p1() {
    sext_ln106_fu_130_p1 = esl_sext<64,32>(edges_q1.read());
}

void loop_imperfect::thread_vertices_address0() {
    vertices_address0 = vertices_addr_reg_163.read();
}

void loop_imperfect::thread_vertices_address1() {
    vertices_address1 = vertices_addr_1_reg_168.read();
}

void loop_imperfect::thread_vertices_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        vertices_ce0 = ap_const_logic_1;
    } else {
        vertices_ce0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_vertices_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        vertices_ce1 = ap_const_logic_1;
    } else {
        vertices_ce1 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_vertices_d0() {
    vertices_d0 = v2_reg_179.read();
}

void loop_imperfect::thread_vertices_d1() {
    vertices_d1 = v1_reg_173.read();
}

void loop_imperfect::thread_vertices_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(icmp_ln108_fu_139_p2.read(), ap_const_lv1_1))) {
        vertices_we0 = ap_const_logic_1;
    } else {
        vertices_we0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_vertices_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln108_reg_185.read(), ap_const_lv1_1))) {
        vertices_we1 = ap_const_logic_1;
    } else {
        vertices_we1 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_zext_ln102_fu_109_p1() {
    zext_ln102_fu_109_p1 = esl_zext<64,11>(j_fu_101_p3.read());
}

void loop_imperfect::thread_zext_ln103_fu_120_p1() {
    zext_ln103_fu_120_p1 = esl_zext<64,11>(or_ln103_fu_114_p2.read());
}

void loop_imperfect::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln99_fu_89_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void loop_imperfect::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_address0\" :  \"" << vertices_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_ce0\" :  \"" << vertices_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_we0\" :  \"" << vertices_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_d0\" :  \"" << vertices_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vertices_q0\" :  \"" << vertices_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_address1\" :  \"" << vertices_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_ce1\" :  \"" << vertices_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_we1\" :  \"" << vertices_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vertices_d1\" :  \"" << vertices_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vertices_q1\" :  \"" << vertices_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"edges_address0\" :  \"" << edges_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"edges_ce0\" :  \"" << edges_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edges_q0\" :  \"" << edges_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"edges_address1\" :  \"" << edges_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"edges_ce1\" :  \"" << edges_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"edges_q1\" :  \"" << edges_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

