

======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB8, BB2)

Consumer of type LLVM Phi!!


		 Triggering the backward edge case when the consumer is LLVM PHI_ !!!!

		 Printing the SOP of the SUPP in this case! The condition is opposite to SUPPRESS!!:
 C8 &  + 


	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!

	 Not printing the Boolean expressions since we are in a case of LLVM PHI!!

======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB7, BB3)

Consumer of type LLVM Phi!!


		 Triggering the backward edge case when the consumer is LLVM PHI_ !!!!

	ISSUE: need to fix the calculated loop exit condition!!

		 Printing the SOP of the SUPP in this case! The condition is opposite to SUPPRESS!!:
 C7 &  + 


	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!

	 Not printing the Boolean expressions since we are in a case of LLVM PHI!!

======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB6, BB4)

Consumer of type LLVM Phi!!


		 Triggering the backward edge case when the consumer is LLVM PHI_ !!!!

	ISSUE: need to fix the calculated loop exit condition!!

		 Printing the SOP of the SUPP in this case! The condition is opposite to SUPPRESS!!:
 C6 &  + 


	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!

	 Not printing the Boolean expressions since we are in a case of LLVM PHI!!

======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB6)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB3, BB7)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB2, BB8)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB8, BB9)

Consumer of type type = "Operator!!


		 Triggering the more_prod_than_cons case!!!!

	The consumer deps before calling addLoopsExitstoDeps_ProdInConsOut are: 
****************Inside FindLoopExits_ProdInConsOut*********

	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB8 , 


	 The finalized f_prod =  1 


	 The finalized f_cons =  not C8 &  +  not C8 &  + 


	 Add a SUPPRESS with f_supp = 
 C8 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!


======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type type = "Merge!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB4, BB4)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB2

	 The finalized f_prod =  1 


	 The finalized f_cons =  C6 &  + 


	 Add a SUPPRESS with f_supp = 
 not C6 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type type = "Mux!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type type = "Merge!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB3, BB3)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB2

	 The finalized f_prod =  1 


	 The finalized f_cons =  C7 &  + 


	 Add a SUPPRESS with f_supp = 
 not C7 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type type = "Mux!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type type = "Merge!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB4, BB4)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB3

	 The finalized f_prod =  1 


	 The finalized f_cons =  C6 &  + 


	 Add a SUPPRESS with f_supp = 
 not C6 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type type = "Mux!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!

