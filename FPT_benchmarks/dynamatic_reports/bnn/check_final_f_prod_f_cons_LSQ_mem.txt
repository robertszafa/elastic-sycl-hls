

======================================================


New (Producer,Consumer) pair: (BB3, BB6)

Consumer of type type = "Merge!!


		 Triggering the more_prod_than_cons case!!!!

	The consumer deps before calling addLoopsExitstoDeps_ProdInConsOut are: 
****************Inside FindLoopExits_ProdInConsOut*********

	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB3 , 


	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB4 , 


	 The finalized f_prod =  1 


	 The finalized f_cons =  not C3 &  not C4 &  + 


	 Add a SUPPRESS with f_supp = 
 C4 &  +  C3 &  + 


	Right before calling applyShannon, the size of f_supp is: 2

	Inside applyShannon

	Printing the f_supp after converting it to string
x1 + 1x + 


F_SUPP is a big condition!!

************ About to print the details of a MUX ***********
	The MUX has non-MUX inputs!!!
	The SEL of the MUX is: 3

	The size of in0 of the MUX is: 1 and the expressions are 

C4 &  + 

	The size of in1 of the MUX is: 1 and the expressions are 

1 &  + 



======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB3

	 The finalized f_prod =  1 


	 The finalized f_cons =  C6 &  + 


	 Add a SUPPRESS with f_supp = 
 not C6 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!
