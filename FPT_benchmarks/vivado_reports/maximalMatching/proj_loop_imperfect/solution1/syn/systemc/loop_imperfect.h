// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _loop_imperfect_HH_
#define _loop_imperfect_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct loop_imperfect : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > vertices_address0;
    sc_out< sc_logic > vertices_ce0;
    sc_out< sc_logic > vertices_we0;
    sc_out< sc_lv<32> > vertices_d0;
    sc_in< sc_lv<32> > vertices_q0;
    sc_out< sc_lv<11> > vertices_address1;
    sc_out< sc_logic > vertices_ce1;
    sc_out< sc_logic > vertices_we1;
    sc_out< sc_lv<32> > vertices_d1;
    sc_in< sc_lv<32> > vertices_q1;
    sc_out< sc_lv<11> > edges_address0;
    sc_out< sc_logic > edges_ce0;
    sc_in< sc_lv<32> > edges_q0;
    sc_out< sc_lv<11> > edges_address1;
    sc_out< sc_logic > edges_ce1;
    sc_in< sc_lv<32> > edges_q1;


    // Module declarations
    loop_imperfect(sc_module_name name);
    SC_HAS_PROCESS(loop_imperfect);

    ~loop_imperfect();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > i_fu_95_p2;
    sc_signal< sc_lv<10> > i_reg_148;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln99_fu_89_p2;
    sc_signal< sc_lv<11> > vertices_addr_reg_163;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > vertices_addr_1_reg_168;
    sc_signal< sc_lv<32> > v1_reg_173;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > v2_reg_179;
    sc_signal< sc_lv<1> > icmp_ln108_fu_139_p2;
    sc_signal< sc_lv<1> > icmp_ln108_reg_185;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<10> > i_0_reg_78;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > zext_ln102_fu_109_p1;
    sc_signal< sc_lv<64> > zext_ln103_fu_120_p1;
    sc_signal< sc_lv<64> > sext_ln105_fu_125_p1;
    sc_signal< sc_lv<64> > sext_ln106_fu_130_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<11> > j_fu_101_p3;
    sc_signal< sc_lv<11> > or_ln103_fu_114_p2;
    sc_signal< sc_lv<32> > or_ln108_fu_135_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_edges_address0();
    void thread_edges_address1();
    void thread_edges_ce0();
    void thread_edges_ce1();
    void thread_i_fu_95_p2();
    void thread_icmp_ln108_fu_139_p2();
    void thread_icmp_ln99_fu_89_p2();
    void thread_j_fu_101_p3();
    void thread_or_ln103_fu_114_p2();
    void thread_or_ln108_fu_135_p2();
    void thread_sext_ln105_fu_125_p1();
    void thread_sext_ln106_fu_130_p1();
    void thread_vertices_address0();
    void thread_vertices_address1();
    void thread_vertices_ce0();
    void thread_vertices_ce1();
    void thread_vertices_d0();
    void thread_vertices_d1();
    void thread_vertices_we0();
    void thread_vertices_we1();
    void thread_zext_ln102_fu_109_p1();
    void thread_zext_ln103_fu_120_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
