

******************************************************************
******Dynamic High-Level Synthesis Compiler***********************
******Andrea Guerrieri - Lana Josipovic - EPFL-LAP 2019 **********
******Version 2.0 - Build 1.0 ************************************
******************************************************************

synthesis_optimized.tcl
Done 
set input file: chaosNCG.cpp
current input filename: ./src/chaosNCG.cpp
Done 
Synthesize
compile chaosNCG.cpp . -use-lsq=true Andrea: arg1:  chaosNCG.cpp arg2: . arg3 -use-lsq=true arg4
/home/dynamatic/Dynamatic/etc/llvm-6.0/bin/clang -emit-llvm -S   -c src/chaosNCG.cpp -o .chaosNCG.cpp.ll
rm: cannot remove '*.s': No such file or directory
0; ModuleID = '.chaosNCG.cpp_mem2reg_constprop_simplifycfg_die.ll'
source_filename = "src/chaosNCG.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define i32 @_Z8chaosNCGPiS_iii(i32* %A, i32* %M, i32 %I, i32 %Y, i32 %X) #0 {
block1:
  br label %block2

block2:                                           ; preds = %block2, %block1
  %i.01 = phi i32 [ 0, %block1 ], [ %add30, %block2 ]
  %add = add nsw i32 %i.01, %I
  %add1 = add nsw i32 %add, 2
  %idxprom = sext i32 %add1 to i64
  %arrayidx = getelementptr inbounds i32, i32* %M, i64 %idxprom
  %"2" = load i32, i32* %arrayidx, align 4
  %add2 = add nsw i32 %i.01, %I
  %sub = add nsw i32 %add2, -2
  %idxprom3 = sext i32 %sub to i64
  %arrayidx4 = getelementptr inbounds i32, i32* %M, i64 %idxprom3
  %"3" = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %"2" to i64
  %arrayidx6 = getelementptr inbounds i32, i32* %A, i64 %idxprom5
  %"4" = load i32, i32* %arrayidx6, align 4
  %idxprom7 = sext i32 %"3" to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %A, i64 %idxprom7
  %"5" = load i32, i32* %arrayidx8, align 4
  %xor = xor i32 %"4", %"5"
  %and = and i32 %xor, 15
  %shl = shl i32 %X, %and
  %and9 = and i32 %xor, 15
  %sub10 = sub nsw i32 16, %and9
  %shr = ashr i32 %X, %sub10
  %or = or i32 %shl, %shr
  %xor11 = xor i32 %xor, %or
  %xor12 = xor i32 %"4", %or
  %and13 = and i32 %xor12, 15
  %shl14 = shl i32 %Y, %and13
  %and15 = and i32 %xor12, 15
  %sub16 = sub nsw i32 16, %and15
  %shr17 = ashr i32 %Y, %sub16
  %or18 = or i32 %shl14, %shr17
  %add19 = add nsw i32 %xor12, %or18
  %"6" = zext i32 %i.01 to i64
  %arrayidx22 = getelementptr inbounds i32, i32* %M, i64 %"6"
  %"7" = load i32, i32* %arrayidx22, align 4
  %idxprom23 = sext i32 %"7" to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %A, i64 %idxprom23
  store i32 %xor11, i32* %arrayidx24, align 4
  %add25 = or i32 %i.01, 1
  %"8" = zext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds i32, i32* %M, i64 %"8"
  %"9" = load i32, i32* %arrayidx27, align 4
  %idxprom28 = sext i32 %"9" to i64
  %arrayidx29 = getelementptr inbounds i32, i32* %A, i64 %idxprom28
  store i32 %add19, i32* %arrayidx29, align 4
  %add30 = add nuw nsw i32 %i.01, 2
  %cmp = icmp ult i32 %add30, 2000
  br i1 %cmp, label %block2, label %block3

block3:                                           ; preds = %block2
  ret i32 %add30
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() #1 {
entry:
  %M = alloca [1 x [3000 x i32]], align 16
  %A = alloca [1 x [3000 x i32]], align 16
  call void @srand(i32 13) #3
  br label %for.body

for.body:                                         ; preds = %for.inc10, %entry
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body
  %j.01 = phi i32 [ 0, %for.body ], [ %inc, %for.body3 ]
  %0 = zext i32 %j.01 to i64
  %1 = getelementptr inbounds [1 x [3000 x i32]], [1 x [3000 x i32]]* %M, i64 0, i64 0, i64 %0
  store i32 %j.01, i32* %1, align 4
  %call = call i32 @rand() #3
  %rem = srem i32 %call, 100
  %2 = zext i32 %j.01 to i64
  %3 = getelementptr inbounds [1 x [3000 x i32]], [1 x [3000 x i32]]* %A, i64 0, i64 0, i64 %2
  store i32 %rem, i32* %3, align 4
  %inc = add nuw nsw i32 %j.01, 1
  %cmp2 = icmp ult i32 %inc, 3000
  br i1 %cmp2, label %for.body3, label %for.inc10

for.inc10:                                        ; preds = %for.body3
  br i1 false, label %for.body, label %for.end12

for.end12:                                        ; preds = %for.inc10
  %arraydecay = getelementptr inbounds [1 x [3000 x i32]], [1 x [3000 x i32]]* %A, i64 0, i64 0, i64 0
  %arraydecay18 = getelementptr inbounds [1 x [3000 x i32]], [1 x [3000 x i32]]* %M, i64 0, i64 0, i64 0
  %call19 = call i32 @_Z8chaosNCGPiS_iii(i32* nonnull %arraydecay, i32* nonnull %arraydecay18, i32 2, i32 1, i32 1)
  ret i32 0
}

; Function Attrs: nounwind
declare void @srand(i32) #2

; Function Attrs: nounwind
declare i32 @rand() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.1 (http://llvm.org/git/clang.git 2f27999df400d17b33cdd412fdd606a88208dfcc) (http://llvm.org/git/llvm.git 5136df4d089a086b70d452160ad5451861269498)"}


Done 
Done 
Optimize
buffers buffers -filename=./reports/chaosNCG -period=4 
Aya: INSIDE main_shab!

Aya: before parse_user_input!

Aya: after parse_user_input!
****************************************
dataflow graph name: ./reports/chaosNCG
milp solver: cbc
delay: 0, period: 4
timeout: 180
set optimization: true
first MG optimization: false
****************************************

Aya: after print_input!

Aya: Before constructing a DF object!
currently traversing node I
currently traversing node Y
currently traversing node X
currently traversing node cst_0
currently traversing node start_0
currently traversing node cst_12
currently traversing node forkC_6
currently traversing node phi_1
currently traversing node add_2
currently traversing node cst_1
currently traversing node add_3
currently traversing node load_6
currently traversing node add_7
currently traversing node cst_2
currently traversing node add_8
currently traversing node load_11
currently traversing node load_14
currently traversing node load_17
currently traversing node xor_18
currently traversing node cst_3
currently traversing node and_19
currently traversing node shl_20
currently traversing node cst_4
currently traversing node and_21
currently traversing node cst_5
currently traversing node sub_22
currently traversing node ashr_23
currently traversing node or_24
currently traversing node xor_25
currently traversing node xor_26
currently traversing node cst_6
currently traversing node and_27
currently traversing node shl_28
currently traversing node cst_7
currently traversing node and_29
currently traversing node cst_8
currently traversing node sub_30
currently traversing node ashr_31
currently traversing node or_32
currently traversing node add_33
currently traversing node load_36
currently traversing node store_0
currently traversing node cst_9
currently traversing node or_39
currently traversing node load_42
currently traversing node store_1
currently traversing node cst_10
currently traversing node add_45
currently traversing node cst_11
currently traversing node icmp_46
currently traversing node forkC_0
currently traversing node phi_n0
currently traversing node phi_n2
currently traversing node phi_n4
currently traversing node phiC_6
currently traversing node branch_0
currently traversing node phi_n18
currently traversing node branch_2
currently traversing node branch_3
currently traversing node branch_4
currently traversing node branchC_5
currently traversing node fork_0
currently traversing node fork_1
currently traversing node fork_2
currently traversing node fork_3
currently traversing node fork_4
currently traversing node fork_5
currently traversing node fork_7
currently traversing node fork_8
currently traversing node fork_9
currently traversing node forkC_10
currently traversing node fork_11
currently traversing node fork_12
currently traversing node ret_0
currently traversing node LSQ_A
currently traversing node MC_M
currently traversing node sink_1
currently traversing node sink_2
currently traversing node sink_3
currently traversing node sink_4
currently traversing node end_0

Entering DF_I check function!!

Coming out of DF_I check function!!
===================
READING BB DOT FILE
===================
Reading graph name...
Reading set of nodes...
Reading set of edges between nodes...
Setting entry and exit BB...
	Entry: BB1, Exit: BB3
Setting BB frequencies...
BB1 : 1
BB2 : 1000
BB3 : 1


Aya: After constructing a DF object!
Adding elastic buffers with period=4 and buffer_delay=0


Aya: Before calling DF.setMilpSolver!

Aya: After returning from DF.setMilpSolver!

Aya: Before calling DF.addElasticBuffersBB_sc!
======================
ADDING ELASTIC BUFFERS
======================
Extracting marked graphs
--------------------------
Iteration 1
ILP time: [ms] 11 
Arcs in the CFDFC:
	2->2:999
Updating frequencies...
Storing CFDFC and corresponding Marked Graph...
--------------------------
Iteration 2
ILP time: [ms] 9 
Arcs in the CFDFC:
No new MG can be extracted to increase coverage.

*******************
Covered Frequency = 999, Total Frequency = 1001, Coverage = 0.998002
*******************

Aya:Done Extracting marked graphs!

determining buffer from/to MC_LSQ units to/from loads.
Calculating disjoint sets of CFDFCs...
	initialize
	union
	get set of unique dsu numbers
	merge and get sub-components
Total number of Extracted Disjoint CFDFCs: 1
Adding Marked Graphs from CFDFCs...


===================================
PRINTING CHANNELS FREQUENCIES
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 1 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 1 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 1 is::: 1
Freq of channel in Src_BB number 1 and dst_BB number 2 is::: 1
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 3 is::: 1
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 2 and dst_BB number 2 is::: 1000
Freq of channel in Src_BB number 3 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 0 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 2 is::: 0
Freq of channel in Src_BB number 0 and dst_BB number 0 is::: 0

===================================
-------------------------------
Initiating MILP for MG number 0
-------------------------------
 creating throughput vars for sub_mg0

Aya: Before the loop over Blocks

Aya: After the loop over Blocks

Aya: Before the loop over Channels

Aya: After the loop over Channels

Aya: Done with the function createMilpVarsEB_sc

Aya: done with the first loop over channels!

Aya: done with the second loop over channels!

Aya: done with the first loop over blocks!

Aya: done with the second loop over blocks!

Aya: done with createPathConstraints_sc boolean function!!

Aya: done with createElasticityConstraints_sc boolean function!!
Lana: back edge is branch_0:out2 -> phi_1:in2
Lana: back edge is branch_2:out2 -> phi_n0:in2
Lana: back edge is branch_3:out2 -> phi_n2:in2
Lana: back edge is branch_4:out2 -> phi_n4:in2
Lana: back edge is branchC_5:out2 -> phiC_6:in2
Lana: back edge is fork_5:out2 -> phi_n18:in2
Solving MILP for elastic buffers: MG 0
Milp time for MG 0: [ms] 2001 

************************
*** Throughput for MG 0 in disjoint MG 0: 1.00 ***
************************
Adding buffer in phi_1:out1 -> fork_0:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in xor_26:out1 -> fork_3:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in cst_6:out1 -> and_27:in2 | slots: 8, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in cst_8:out1 -> sub_30:in1 | slots: 8, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in phi_n0:out1 -> fork_7:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in phi_n2:out1 -> fork_8:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in phi_n4:out1 -> fork_9:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in phiC_6:out1 -> forkC_10:in1 | slots: 2, trans: 0 | BB2 -> BB2 (inner)
Adding buffer in fork_5:out4 -> branch_3:in2 | slots: 8, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in fork_5:out5 -> branch_4:in2 | slots: 7, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in forkC_10:out4 -> cst_3:in1 | slots: 7, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in forkC_10:out5 -> cst_4:in1 | slots: 7, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in forkC_10:out6 -> cst_5:in1 | slots: 7, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in forkC_10:out8 -> cst_7:in1 | slots: 8, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in fork_11:out3 -> phi_n2:in1 | slots: 8, trans: 1 | BB2 -> BB2 (inner)
Adding buffer in fork_11:out4 -> phi_n4:in1 | slots: 7, trans: 1 | BB2 -> BB2 (inner)

*** Throughput achieved in sub MG 0: 1.00 ***

--------------------------------------
Initiating MILP for remaining channels
--------------------------------------
Solving MILP for channels not covered by MGs
Milp time for remaining channels: [ms] 78 

***************************
Total MILP time: [ms] 2079
***************************

Aya: After calling DF.addElasticBuffersBB_sc!
INSTANTIATE
Done 
Write hdl
write_hdl  . ./reports/chaosNCG_optimized

******************************************************************
******Dynamic High-Level Synthesis Compiler **********************
******Andrea Guerrieri - Lana Josipovic - EPFL-LAP 2019 **********
******Dot to VHDL Generator***************************************
******************************************************************
Parsing ./reports/chaosNCG_optimized.dot

Report Modules 
+--------------------------------------------------------------------------+
|   Node_ID|                Name|         Module_type|    Inputs|   Outputs|
+--------------------------------------------------------------------------+
|         0|                   I|               Entry|         1|         1|
|         1|                   Y|               Entry|         1|         1|
|         2|                   X|               Entry|         1|         1|
|         3|               cst_0|            Constant|         1|         1|
|         4|             start_0|               Entry|         1|         1|
|         5|              cst_12|            Constant|         1|         1|
|         6|             forkC_6|                Fork|         1|         3|
|         7|               phi_1|                 Mux|         3|         1|
|         8|               add_2|            Operator|         2|         1|
|         9|               cst_1|            Constant|         1|         1|
|        10|               add_3|            Operator|         2|         1|
|        11|              load_6|            Operator|         2|         2|
|        12|               add_7|            Operator|         2|         1|
|        13|               cst_2|            Constant|         1|         1|
|        14|               add_8|            Operator|         2|         1|
|        15|             load_11|            Operator|         2|         2|
|        16|             load_14|            Operator|         2|         2|
|        17|             load_17|            Operator|         2|         2|
|        18|              xor_18|            Operator|         2|         1|
|        19|               cst_3|            Constant|         1|         1|
|        20|              and_19|            Operator|         2|         1|
|        21|              shl_20|            Operator|         2|         1|
|        22|               cst_4|            Constant|         1|         1|
|        23|              and_21|            Operator|         2|         1|
|        24|               cst_5|            Constant|         1|         1|
|        25|              sub_22|            Operator|         2|         1|
|        26|             ashr_23|            Operator|         2|         1|
|        27|               or_24|            Operator|         2|         1|
|        28|              xor_25|            Operator|         2|         1|
|        29|              xor_26|            Operator|         2|         1|
|        30|               cst_6|            Constant|         1|         1|
|        31|              and_27|            Operator|         2|         1|
|        32|              shl_28|            Operator|         2|         1|
|        33|               cst_7|            Constant|         1|         1|
|        34|              and_29|            Operator|         2|         1|
|        35|               cst_8|            Constant|         1|         1|
|        36|              sub_30|            Operator|         2|         1|
|        37|             ashr_31|            Operator|         2|         1|
|        38|               or_32|            Operator|         2|         1|
|        39|              add_33|            Operator|         2|         1|
|        40|             load_36|            Operator|         2|         2|
|        41|             store_0|            Operator|         2|         2|
|        42|               cst_9|            Constant|         1|         1|
|        43|               or_39|            Operator|         2|         1|
|        44|             load_42|            Operator|         2|         2|
|        45|             store_1|            Operator|         2|         2|
|        46|              cst_10|            Constant|         1|         1|
|        47|              add_45|            Operator|         2|         1|
|        48|              cst_11|            Constant|         1|         1|
|        49|             icmp_46|            Operator|         2|         1|
|        50|             forkC_0|                Fork|         1|         1|
|        51|              phi_n0|                 Mux|         3|         1|
|        52|              phi_n2|                 Mux|         3|         1|
|        53|              phi_n4|                 Mux|         3|         1|
|        54|              phiC_6|                 Mux|         3|         1|
|        55|            branch_0|              Branch|         2|         2|
|        56|             phi_n18|               Merge|         2|         1|
|        57|            branch_2|              Branch|         2|         2|
|        58|            branch_3|              Branch|         2|         2|
|        59|            branch_4|              Branch|         2|         2|
|        60|           branchC_5|              Branch|         2|         2|
|        61|              fork_0|                Fork|         1|         5|
|        62|              fork_1|                Fork|         1|         3|
|        63|              fork_2|                Fork|         1|         2|
|        64|              fork_3|                Fork|         1|         3|
|        65|              fork_4|                Fork|         1|         2|
|        66|              fork_5|                Fork|         1|         6|
|        67|              fork_7|                Fork|         1|         3|
|        68|              fork_8|                Fork|         1|         3|
|        69|              fork_9|                Fork|         1|         3|
|        70|            forkC_10|                Fork|         1|        13|
|        71|             fork_11|                Fork|         1|         5|
|        72|             fork_12|                Fork|         1|         2|
|        73|            Buffer_1|              Buffer|         1|         1|
|        74|            Buffer_2|              Buffer|         1|         1|
|        75|            Buffer_3|               tFifo|         1|         1|
|        76|            Buffer_4|               tFifo|         1|         1|
|        77|            Buffer_5|              Buffer|         1|         1|
|        78|            Buffer_6|              Buffer|         1|         1|
|        79|            Buffer_7|              Buffer|         1|         1|
|        80|            Buffer_8|              Buffer|         1|         1|
|        81|            Buffer_9|               tFifo|         1|         1|
|        82|           Buffer_10|               tFifo|         1|         1|
|        83|           Buffer_11|               tFifo|         1|         1|
|        84|           Buffer_12|               tFifo|         1|         1|
|        85|           Buffer_13|               tFifo|         1|         1|
|        86|           Buffer_14|               tFifo|         1|         1|
|        87|           Buffer_15|               tFifo|         1|         1|
|        88|           Buffer_16|               tFifo|         1|         1|
|        89|               ret_0|            Operator|         1|         1|
|        90|               LSQ_A|                 LSQ|         7|         3|
|        91|                MC_M|                  MC|         7|         5|
|        92|              sink_1|                Sink|         1|         0|
|        93|              sink_2|                Sink|         1|         0|
|        94|              sink_3|                Sink|         1|         0|
|        95|              sink_4|                Sink|         1|         0|
|        96|               end_0|                Exit|         3|         1|
+--------------------------------------------------------------------------+
Generating ./reports/chaosNCG_optimized.vhd
Generating LSQ 0 component...
lsq_generate ./reports/chaosNCG_optimized_lsq0_configuration.json
[[35minfo[0m] [0.003] Elaborating design...
[[35minfo[0m] [1.744] Done elaborating.
Total FIRRTL Compile Time: 7323.2 ms

Done



Done 
Exit...
Goodbye!


