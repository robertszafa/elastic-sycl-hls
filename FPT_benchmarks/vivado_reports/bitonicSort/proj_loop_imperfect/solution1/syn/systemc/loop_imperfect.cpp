// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "loop_imperfect.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic loop_imperfect::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic loop_imperfect::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> loop_imperfect::ap_ST_fsm_state1 = "1";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state2 = "10";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state3 = "100";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state4 = "1000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state5 = "10000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state6 = "100000";
const sc_lv<7> loop_imperfect::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_1 = "1";
const sc_lv<1> loop_imperfect::ap_const_lv1_1 = "1";
const sc_lv<32> loop_imperfect::ap_const_lv32_2 = "10";
const sc_lv<1> loop_imperfect::ap_const_lv1_0 = "0";
const sc_lv<32> loop_imperfect::ap_const_lv32_3 = "11";
const sc_lv<32> loop_imperfect::ap_const_lv32_4 = "100";
const sc_lv<32> loop_imperfect::ap_const_lv32_6 = "110";
const sc_lv<32> loop_imperfect::ap_const_lv32_5 = "101";
const sc_lv<7> loop_imperfect::ap_const_lv7_0 = "0000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_41 = "1000001";
const sc_lv<32> loop_imperfect::ap_const_lv32_1F = "11111";
const sc_lv<31> loop_imperfect::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> loop_imperfect::ap_const_lv32_1E = "11110";
const sc_lv<7> loop_imperfect::ap_const_lv7_40 = "1000000";
const sc_lv<7> loop_imperfect::ap_const_lv7_1 = "1";
const sc_lv<6> loop_imperfect::ap_const_lv6_0 = "000000";
const bool loop_imperfect::ap_const_boolean_1 = true;

loop_imperfect::loop_imperfect(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( A_addr_reg_279 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln108_fu_190_p1 );

    SC_METHOD(thread_A_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( A_addr_1_reg_284 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln109_fu_195_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_A_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_A_d0);
    sensitive << ( A_q1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_A_d1);
    sensitive << ( Ai_reg_295 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_A_we0);
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln112_1_fu_216_p2 );
    sensitive << ( and_ln112_2_fu_233_p2 );

    SC_METHOD(thread_A_we1);
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( and_ln112_1_reg_300 );
    sensitive << ( and_ln112_2_reg_304 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_and_ln112_1_fu_216_p2);
    sensitive << ( icmp_ln112_fu_205_p2 );
    sensitive << ( icmp_ln112_1_fu_210_p2 );

    SC_METHOD(thread_and_ln112_2_fu_233_p2);
    sensitive << ( icmp_ln112_2_fu_222_p2 );
    sensitive << ( icmp_ln112_3_fu_228_p2 );

    SC_METHOD(thread_and_ln112_fu_200_p2);
    sensitive << ( trunc_ln96_reg_242 );
    sensitive << ( trunc_ln102_fu_171_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln96_fu_113_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln96_fu_113_p2 );

    SC_METHOD(thread_i_fu_165_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln102_fu_159_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln107_fu_184_p2);
    sensitive << ( icmp_ln102_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln102_fu_175_p1 );
    sensitive << ( l_fu_179_p2 );

    SC_METHOD(thread_icmp_ln112_1_fu_210_p2);
    sensitive << ( A_q0 );
    sensitive << ( A_q1 );
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln112_2_fu_222_p2);
    sensitive << ( A_q0 );
    sensitive << ( A_q1 );
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln112_1_fu_216_p2 );

    SC_METHOD(thread_icmp_ln112_3_fu_228_p2);
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( and_ln112_reg_289 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln112_1_fu_216_p2 );

    SC_METHOD(thread_icmp_ln112_fu_205_p2);
    sensitive << ( icmp_ln102_reg_266 );
    sensitive << ( icmp_ln107_reg_275 );
    sensitive << ( and_ln112_reg_289 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln96_fu_113_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_icmp_ln99_fu_133_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln1_fu_123_p4 );

    SC_METHOD(thread_j_fu_139_p1);
    sensitive << ( trunc_ln1_fu_123_p4 );

    SC_METHOD(thread_k_fu_153_p2);
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_l_fu_179_p2);
    sensitive << ( trunc_ln99_1_reg_256 );
    sensitive << ( zext_ln102_fu_175_p1 );

    SC_METHOD(thread_trunc_ln102_fu_171_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_trunc_ln1_fu_123_p4);
    sensitive << ( j_0_in_reg_92 );

    SC_METHOD(thread_trunc_ln96_fu_119_p1);
    sensitive << ( k_0_reg_80 );

    SC_METHOD(thread_zext_ln102_fu_175_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_zext_ln108_fu_190_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_zext_ln109_fu_195_p1);
    sensitive << ( l_fu_179_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln96_fu_113_p2 );
    sensitive << ( icmp_ln99_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln102_fu_159_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "loop_imperfect_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, A_address1, "(port)A_address1");
    sc_trace(mVcdFile, A_ce1, "(port)A_ce1");
    sc_trace(mVcdFile, A_we1, "(port)A_we1");
    sc_trace(mVcdFile, A_d1, "(port)A_d1");
    sc_trace(mVcdFile, A_q1, "(port)A_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln96_fu_119_p1, "trunc_ln96_fu_119_p1");
    sc_trace(mVcdFile, trunc_ln96_reg_242, "trunc_ln96_reg_242");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln96_fu_113_p2, "icmp_ln96_fu_113_p2");
    sc_trace(mVcdFile, icmp_ln99_fu_133_p2, "icmp_ln99_fu_133_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_fu_139_p1, "j_fu_139_p1");
    sc_trace(mVcdFile, j_reg_251, "j_reg_251");
    sc_trace(mVcdFile, trunc_ln99_1_reg_256, "trunc_ln99_1_reg_256");
    sc_trace(mVcdFile, k_fu_153_p2, "k_fu_153_p2");
    sc_trace(mVcdFile, icmp_ln102_fu_159_p2, "icmp_ln102_fu_159_p2");
    sc_trace(mVcdFile, icmp_ln102_reg_266, "icmp_ln102_reg_266");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_fu_165_p2, "i_fu_165_p2");
    sc_trace(mVcdFile, i_reg_270, "i_reg_270");
    sc_trace(mVcdFile, icmp_ln107_fu_184_p2, "icmp_ln107_fu_184_p2");
    sc_trace(mVcdFile, icmp_ln107_reg_275, "icmp_ln107_reg_275");
    sc_trace(mVcdFile, A_addr_reg_279, "A_addr_reg_279");
    sc_trace(mVcdFile, A_addr_1_reg_284, "A_addr_1_reg_284");
    sc_trace(mVcdFile, and_ln112_fu_200_p2, "and_ln112_fu_200_p2");
    sc_trace(mVcdFile, and_ln112_reg_289, "and_ln112_reg_289");
    sc_trace(mVcdFile, Ai_reg_295, "Ai_reg_295");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, and_ln112_1_fu_216_p2, "and_ln112_1_fu_216_p2");
    sc_trace(mVcdFile, and_ln112_1_reg_300, "and_ln112_1_reg_300");
    sc_trace(mVcdFile, and_ln112_2_fu_233_p2, "and_ln112_2_fu_233_p2");
    sc_trace(mVcdFile, and_ln112_2_reg_304, "and_ln112_2_reg_304");
    sc_trace(mVcdFile, k_0_reg_80, "k_0_reg_80");
    sc_trace(mVcdFile, j_0_in_reg_92, "j_0_in_reg_92");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_0_reg_102, "i_0_reg_102");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln108_fu_190_p1, "zext_ln108_fu_190_p1");
    sc_trace(mVcdFile, zext_ln109_fu_195_p1, "zext_ln109_fu_195_p1");
    sc_trace(mVcdFile, trunc_ln1_fu_123_p4, "trunc_ln1_fu_123_p4");
    sc_trace(mVcdFile, zext_ln102_fu_175_p1, "zext_ln102_fu_175_p1");
    sc_trace(mVcdFile, l_fu_179_p2, "l_fu_179_p2");
    sc_trace(mVcdFile, trunc_ln102_fu_171_p1, "trunc_ln102_fu_171_p1");
    sc_trace(mVcdFile, icmp_ln112_fu_205_p2, "icmp_ln112_fu_205_p2");
    sc_trace(mVcdFile, icmp_ln112_1_fu_210_p2, "icmp_ln112_1_fu_210_p2");
    sc_trace(mVcdFile, icmp_ln112_2_fu_222_p2, "icmp_ln112_2_fu_222_p2");
    sc_trace(mVcdFile, icmp_ln112_3_fu_228_p2, "icmp_ln112_3_fu_228_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("loop_imperfect.hdltvin.dat");
    mHdltvoutHandle.open("loop_imperfect.hdltvout.dat");
}

loop_imperfect::~loop_imperfect() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void loop_imperfect::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln99_fu_133_p2.read()))) {
        i_0_reg_102 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        i_0_reg_102 = i_reg_270.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_in_reg_92 = j_reg_251.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln96_fu_113_p2.read(), ap_const_lv1_1))) {
        j_0_in_reg_92 = k_0_reg_80.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln99_fu_133_p2.read(), ap_const_lv1_0))) {
        k_0_reg_80 = k_fu_153_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_80 = ap_const_lv32_2;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_fu_159_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_fu_184_p2.read()))) {
        A_addr_1_reg_284 =  (sc_lv<6>) (zext_ln109_fu_195_p1.read());
        A_addr_reg_279 =  (sc_lv<6>) (zext_ln108_fu_190_p1.read());
        and_ln112_reg_289 = and_ln112_fu_200_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()))) {
        Ai_reg_295 = A_q0.read();
        and_ln112_1_reg_300 = and_ln112_1_fu_216_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln112_1_fu_216_p2.read()))) {
        and_ln112_2_reg_304 = and_ln112_2_fu_233_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_270 = i_fu_165_p2.read();
        icmp_ln102_reg_266 = icmp_ln102_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_fu_159_p2.read()))) {
        icmp_ln107_reg_275 = icmp_ln107_fu_184_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln99_fu_133_p2.read()))) {
        j_reg_251 = j_fu_139_p1.read();
        trunc_ln99_1_reg_256 = j_0_in_reg_92.read().range(30, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln96_fu_113_p2.read(), ap_const_lv1_1))) {
        trunc_ln96_reg_242 = trunc_ln96_fu_119_p1.read();
    }
}

void loop_imperfect::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        A_address0 = A_addr_reg_279.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_address0 =  (sc_lv<6>) (zext_ln108_fu_190_p1.read());
    } else {
        A_address0 = "XXXXXX";
    }
}

void loop_imperfect::thread_A_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        A_address1 = A_addr_1_reg_284.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_address1 =  (sc_lv<6>) (zext_ln109_fu_195_p1.read());
    } else {
        A_address1 = "XXXXXX";
    }
}

void loop_imperfect::thread_A_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_A_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        A_ce1 = ap_const_logic_1;
    } else {
        A_ce1 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_A_d0() {
    A_d0 = A_q1.read();
}

void loop_imperfect::thread_A_d1() {
    A_d1 = Ai_reg_295.read();
}

void loop_imperfect::thread_A_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln112_2_fu_233_p2.read())) || 
          (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln112_1_fu_216_p2.read()))))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_A_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln112_2_reg_304.read())) || 
          (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_reg_266.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln107_reg_275.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln112_1_reg_300.read()))))) {
        A_we1 = ap_const_logic_1;
    } else {
        A_we1 = ap_const_logic_0;
    }
}

void loop_imperfect::thread_and_ln112_1_fu_216_p2() {
    and_ln112_1_fu_216_p2 = (icmp_ln112_fu_205_p2.read() & icmp_ln112_1_fu_210_p2.read());
}

void loop_imperfect::thread_and_ln112_2_fu_233_p2() {
    and_ln112_2_fu_233_p2 = (icmp_ln112_2_fu_222_p2.read() & icmp_ln112_3_fu_228_p2.read());
}

void loop_imperfect::thread_and_ln112_fu_200_p2() {
    and_ln112_fu_200_p2 = (trunc_ln102_fu_171_p1.read() & trunc_ln96_reg_242.read());
}

void loop_imperfect::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void loop_imperfect::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void loop_imperfect::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void loop_imperfect::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void loop_imperfect::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void loop_imperfect::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void loop_imperfect::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void loop_imperfect::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln96_fu_113_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void loop_imperfect::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln96_fu_113_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void loop_imperfect::thread_i_fu_165_p2() {
    i_fu_165_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_102.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void loop_imperfect::thread_icmp_ln102_fu_159_p2() {
    icmp_ln102_fu_159_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_102.read() == ap_const_lv7_40);
}

void loop_imperfect::thread_icmp_ln107_fu_184_p2() {
    icmp_ln107_fu_184_p2 = (!l_fu_179_p2.read().is_01() || !zext_ln102_fu_175_p1.read().is_01())? sc_lv<1>(): (sc_biguint<30>(l_fu_179_p2.read()) > sc_biguint<30>(zext_ln102_fu_175_p1.read()));
}

void loop_imperfect::thread_icmp_ln112_1_fu_210_p2() {
    icmp_ln112_1_fu_210_p2 = (!A_q0.read().is_01() || !A_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(A_q0.read()) > sc_bigint<32>(A_q1.read()));
}

void loop_imperfect::thread_icmp_ln112_2_fu_222_p2() {
    icmp_ln112_2_fu_222_p2 = (!A_q0.read().is_01() || !A_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(A_q0.read()) < sc_bigint<32>(A_q1.read()));
}

void loop_imperfect::thread_icmp_ln112_3_fu_228_p2() {
    icmp_ln112_3_fu_228_p2 = (!and_ln112_reg_289.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln112_reg_289.read() != ap_const_lv6_0);
}

void loop_imperfect::thread_icmp_ln112_fu_205_p2() {
    icmp_ln112_fu_205_p2 = (!and_ln112_reg_289.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln112_reg_289.read() == ap_const_lv6_0);
}

void loop_imperfect::thread_icmp_ln96_fu_113_p2() {
    icmp_ln96_fu_113_p2 = (!k_0_reg_80.read().is_01() || !ap_const_lv32_41.is_01())? sc_lv<1>(): (sc_bigint<32>(k_0_reg_80.read()) < sc_bigint<32>(ap_const_lv32_41));
}

void loop_imperfect::thread_icmp_ln99_fu_133_p2() {
    icmp_ln99_fu_133_p2 = (!trunc_ln1_fu_123_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(trunc_ln1_fu_123_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void loop_imperfect::thread_j_fu_139_p1() {
    j_fu_139_p1 = esl_zext<32,31>(trunc_ln1_fu_123_p4.read());
}

void loop_imperfect::thread_k_fu_153_p2() {
    k_fu_153_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): k_0_reg_80.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void loop_imperfect::thread_l_fu_179_p2() {
    l_fu_179_p2 = (zext_ln102_fu_175_p1.read() ^ trunc_ln99_1_reg_256.read());
}

void loop_imperfect::thread_trunc_ln102_fu_171_p1() {
    trunc_ln102_fu_171_p1 = i_0_reg_102.read().range(6-1, 0);
}

void loop_imperfect::thread_trunc_ln1_fu_123_p4() {
    trunc_ln1_fu_123_p4 = j_0_in_reg_92.read().range(31, 1);
}

void loop_imperfect::thread_trunc_ln96_fu_119_p1() {
    trunc_ln96_fu_119_p1 = k_0_reg_80.read().range(6-1, 0);
}

void loop_imperfect::thread_zext_ln102_fu_175_p1() {
    zext_ln102_fu_175_p1 = esl_zext<30,7>(i_0_reg_102.read());
}

void loop_imperfect::thread_zext_ln108_fu_190_p1() {
    zext_ln108_fu_190_p1 = esl_zext<64,7>(i_0_reg_102.read());
}

void loop_imperfect::thread_zext_ln109_fu_195_p1() {
    zext_ln109_fu_195_p1 = esl_zext<64,30>(l_fu_179_p2.read());
}

void loop_imperfect::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln96_fu_113_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln99_fu_133_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln102_fu_159_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void loop_imperfect::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address1\" :  \"" << A_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce1\" :  \"" << A_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we1\" :  \"" << A_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d1\" :  \"" << A_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q1\" :  \"" << A_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

