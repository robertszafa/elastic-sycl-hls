// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=203,HLS_SYN_LUT=284,HLS_VERSION=2019_2}" *)

module loop_imperfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg A_we0;
reg[5:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] trunc_ln96_fu_119_p1;
reg   [5:0] trunc_ln96_reg_242;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln96_fu_113_p2;
wire   [0:0] icmp_ln99_fu_133_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] j_fu_139_p1;
reg   [31:0] j_reg_251;
reg   [29:0] trunc_ln99_1_reg_256;
wire   [31:0] k_fu_153_p2;
wire   [0:0] icmp_ln102_fu_159_p2;
reg   [0:0] icmp_ln102_reg_266;
wire    ap_CS_fsm_state4;
wire   [6:0] i_fu_165_p2;
reg   [6:0] i_reg_270;
wire   [0:0] icmp_ln107_fu_184_p2;
reg   [0:0] icmp_ln107_reg_275;
reg   [5:0] A_addr_reg_279;
reg   [5:0] A_addr_1_reg_284;
wire   [5:0] and_ln112_fu_200_p2;
reg   [5:0] and_ln112_reg_289;
reg   [31:0] Ai_reg_295;
wire    ap_CS_fsm_state5;
wire   [0:0] and_ln112_1_fu_216_p2;
reg   [0:0] and_ln112_1_reg_300;
wire   [0:0] and_ln112_2_fu_233_p2;
reg   [0:0] and_ln112_2_reg_304;
reg   [31:0] k_0_reg_80;
reg   [31:0] j_0_in_reg_92;
wire    ap_CS_fsm_state7;
reg   [6:0] i_0_reg_102;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln108_fu_190_p1;
wire   [63:0] zext_ln109_fu_195_p1;
wire   [30:0] trunc_ln1_fu_123_p4;
wire   [29:0] zext_ln102_fu_175_p1;
wire   [29:0] l_fu_179_p2;
wire   [5:0] trunc_ln102_fu_171_p1;
wire   [0:0] icmp_ln112_fu_205_p2;
wire   [0:0] icmp_ln112_1_fu_210_p2;
wire   [0:0] icmp_ln112_2_fu_222_p2;
wire   [0:0] icmp_ln112_3_fu_228_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_102 <= 7'd0;
    end else if (((icmp_ln102_reg_266 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_reg_102 <= i_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_in_reg_92 <= j_reg_251;
    end else if (((icmp_ln96_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_in_reg_92 <= k_0_reg_80;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                k_0_reg_80[31 : 1] <= k_fu_153_p2[31 : 1];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                k_0_reg_80[1] <= 1'b1;
        k_0_reg_80[2] <= 1'b0;
        k_0_reg_80[3] <= 1'b0;
        k_0_reg_80[4] <= 1'b0;
        k_0_reg_80[5] <= 1'b0;
        k_0_reg_80[6] <= 1'b0;
        k_0_reg_80[7] <= 1'b0;
        k_0_reg_80[8] <= 1'b0;
        k_0_reg_80[9] <= 1'b0;
        k_0_reg_80[10] <= 1'b0;
        k_0_reg_80[11] <= 1'b0;
        k_0_reg_80[12] <= 1'b0;
        k_0_reg_80[13] <= 1'b0;
        k_0_reg_80[14] <= 1'b0;
        k_0_reg_80[15] <= 1'b0;
        k_0_reg_80[16] <= 1'b0;
        k_0_reg_80[17] <= 1'b0;
        k_0_reg_80[18] <= 1'b0;
        k_0_reg_80[19] <= 1'b0;
        k_0_reg_80[20] <= 1'b0;
        k_0_reg_80[21] <= 1'b0;
        k_0_reg_80[22] <= 1'b0;
        k_0_reg_80[23] <= 1'b0;
        k_0_reg_80[24] <= 1'b0;
        k_0_reg_80[25] <= 1'b0;
        k_0_reg_80[26] <= 1'b0;
        k_0_reg_80[27] <= 1'b0;
        k_0_reg_80[28] <= 1'b0;
        k_0_reg_80[29] <= 1'b0;
        k_0_reg_80[30] <= 1'b0;
        k_0_reg_80[31] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_159_p2 == 1'd0) & (icmp_ln107_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        A_addr_1_reg_284 <= zext_ln109_fu_195_p1;
        A_addr_reg_279 <= zext_ln108_fu_190_p1;
        and_ln112_reg_289[5 : 1] <= and_ln112_fu_200_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_reg_266 == 1'd0) & (icmp_ln107_reg_275 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        Ai_reg_295 <= A_q0;
        and_ln112_1_reg_300 <= and_ln112_1_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_reg_266 == 1'd0) & (1'd0 == and_ln112_1_fu_216_p2) & (icmp_ln107_reg_275 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        and_ln112_2_reg_304 <= and_ln112_2_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_270 <= i_fu_165_p2;
        icmp_ln102_reg_266 <= icmp_ln102_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln107_reg_275 <= icmp_ln107_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_251[30 : 0] <= j_fu_139_p1[30 : 0];
        trunc_ln99_1_reg_256 <= {{j_0_in_reg_92[30:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln96_reg_242[5 : 1] <= trunc_ln96_fu_119_p1[5 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = A_addr_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln108_fu_190_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = A_addr_1_reg_284;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = zext_ln109_fu_195_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln102_reg_266 == 1'd0) & (icmp_ln107_reg_275 == 1'd1) & (1'd1 == and_ln112_1_fu_216_p2)) | ((icmp_ln102_reg_266 == 1'd0) & (icmp_ln107_reg_275 == 1'd1) & (1'd1 == and_ln112_2_fu_233_p2))))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln102_reg_266 == 1'd0) & (icmp_ln107_reg_275 == 1'd1) & (1'd1 == and_ln112_1_reg_300)) | ((icmp_ln102_reg_266 == 1'd0) & (icmp_ln107_reg_275 == 1'd1) & (1'd1 == and_ln112_2_reg_304))))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln96_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln99_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln102_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = A_q1;

assign A_d1 = Ai_reg_295;

assign and_ln112_1_fu_216_p2 = (icmp_ln112_fu_205_p2 & icmp_ln112_1_fu_210_p2);

assign and_ln112_2_fu_233_p2 = (icmp_ln112_3_fu_228_p2 & icmp_ln112_2_fu_222_p2);

assign and_ln112_fu_200_p2 = (trunc_ln96_reg_242 & trunc_ln102_fu_171_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_165_p2 = (i_0_reg_102 + 7'd1);

assign icmp_ln102_fu_159_p2 = ((i_0_reg_102 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_184_p2 = ((l_fu_179_p2 > zext_ln102_fu_175_p1) ? 1'b1 : 1'b0);

assign icmp_ln112_1_fu_210_p2 = (($signed(A_q0) > $signed(A_q1)) ? 1'b1 : 1'b0);

assign icmp_ln112_2_fu_222_p2 = (($signed(A_q0) < $signed(A_q1)) ? 1'b1 : 1'b0);

assign icmp_ln112_3_fu_228_p2 = ((and_ln112_reg_289 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_205_p2 = ((and_ln112_reg_289 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_113_p2 = (($signed(k_0_reg_80) < $signed(32'd65)) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_133_p2 = (($signed(trunc_ln1_fu_123_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign j_fu_139_p1 = trunc_ln1_fu_123_p4;

assign k_fu_153_p2 = k_0_reg_80 << 32'd1;

assign l_fu_179_p2 = (zext_ln102_fu_175_p1 ^ trunc_ln99_1_reg_256);

assign trunc_ln102_fu_171_p1 = i_0_reg_102[5:0];

assign trunc_ln1_fu_123_p4 = {{j_0_in_reg_92[31:1]}};

assign trunc_ln96_fu_119_p1 = k_0_reg_80[5:0];

assign zext_ln102_fu_175_p1 = i_0_reg_102;

assign zext_ln108_fu_190_p1 = i_0_reg_102;

assign zext_ln109_fu_195_p1 = l_fu_179_p2;

always @ (posedge ap_clk) begin
    trunc_ln96_reg_242[0] <= 1'b0;
    j_reg_251[31] <= 1'b0;
    and_ln112_reg_289[0] <= 1'b0;
    k_0_reg_80[0] <= 1'b0;
end

endmodule //loop_imperfect
