-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_imperfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dist_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dist_ce0 : OUT STD_LOGIC;
    dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dist_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dist_ce1 : OUT STD_LOGIC;
    dist_we1 : OUT STD_LOGIC;
    dist_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dist_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of loop_imperfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.331000,HLS_SYN_LAT=6221,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=208,HLS_SYN_LUT=302,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln96_fu_93_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln96_reg_229 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_103_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_109_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_242 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln99_1_fu_117_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln99_1_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_131_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln99_4_fu_157_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln99_4_reg_260 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln97_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_addr_reg_265 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_273 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln99_1_fu_193_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln99_1_reg_278 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln98_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln99_2_fu_207_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln99_2_reg_283 : STD_LOGIC_VECTOR (6 downto 0);
    signal dist_addr_1_reg_288 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dist_load_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dist_load_1_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal dist_load_2_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln99_3_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln99_3_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln99_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_60 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_71 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln99_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_2_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln99_3_fu_145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln99_3_fu_153_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln99_2_fu_137_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln99_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln98_1_fu_177_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln98_fu_173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln99_5_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln99_4_fu_203_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_71 <= i_reg_255;
            elsif (((icmp_ln96_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_71 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_82 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_82 <= j_reg_273;
            end if; 
        end if;
    end process;

    k_0_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_60 <= k_reg_237;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_60 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln99_1_reg_278 <= add_ln99_1_fu_193_p2;
                add_ln99_2_reg_283 <= add_ln99_2_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln99_3_reg_314 <= add_ln99_3_fu_220_p2;
                icmp_ln99_reg_319 <= icmp_ln99_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln99_4_reg_260(6 downto 1) <= add_ln99_4_fu_157_p2(6 downto 1);
                dist_addr_reg_265 <= zext_ln99_fu_168_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dist_addr_1_reg_288 <= zext_ln99_1_fu_212_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                dist_load_1_reg_304 <= dist_q0;
                dist_load_2_reg_309 <= dist_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                dist_load_reg_294 <= dist_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_255 <= i_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_273 <= j_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_237 <= k_fu_103_p2;
                    zext_ln96_reg_229(3 downto 0) <= zext_ln96_fu_93_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln99_1_reg_247(4 downto 1) <= shl_ln99_1_fu_117_p3(4 downto 1);
                    shl_ln_reg_242(6 downto 3) <= shl_ln_fu_109_p3(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln96_reg_229(6 downto 4) <= "000";
    shl_ln_reg_242(2 downto 0) <= "000";
    shl_ln99_1_reg_247(0) <= '0';
    add_ln99_4_reg_260(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln96_fu_97_p2, ap_CS_fsm_state3, icmp_ln97_fu_125_p2, ap_CS_fsm_state4, icmp_ln98_fu_181_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln96_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln97_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln98_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln99_1_fu_193_p2 <= std_logic_vector(unsigned(add_ln99_4_reg_260) + unsigned(zext_ln98_1_fu_177_p1));
    add_ln99_2_fu_207_p2 <= std_logic_vector(unsigned(zext_ln99_4_fu_203_p1) + unsigned(shl_ln_reg_242));
    add_ln99_3_fu_220_p2 <= std_logic_vector(unsigned(dist_load_1_reg_304) + unsigned(dist_load_2_reg_309));
    add_ln99_4_fu_157_p2 <= std_logic_vector(unsigned(zext_ln99_3_fu_153_p1) + unsigned(shl_ln99_2_fu_137_p3));
    add_ln99_5_fu_198_p2 <= std_logic_vector(unsigned(shl_ln99_1_reg_247) + unsigned(zext_ln98_fu_173_p1));
    add_ln99_fu_163_p2 <= std_logic_vector(unsigned(add_ln99_4_fu_157_p2) + unsigned(zext_ln96_reg_229));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_97_p2)
    begin
        if (((icmp_ln96_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_97_p2)
    begin
        if (((icmp_ln96_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dist_address0_assign_proc : process(dist_addr_reg_265, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln99_1_fu_212_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dist_address0 <= dist_addr_reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dist_address0 <= zext_ln99_1_fu_212_p1(7 - 1 downto 0);
        else 
            dist_address0 <= "XXXXXXX";
        end if; 
    end process;


    dist_address1_assign_proc : process(dist_addr_1_reg_288, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln99_2_fu_216_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dist_address1 <= dist_addr_1_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dist_address1 <= zext_ln99_2_fu_216_p1(7 - 1 downto 0);
        else 
            dist_address1 <= "XXXXXXX";
        end if; 
    end process;


    dist_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dist_ce0 <= ap_const_logic_1;
        else 
            dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dist_ce1 <= ap_const_logic_1;
        else 
            dist_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dist_d1 <= add_ln99_3_reg_314;

    dist_we1_assign_proc : process(icmp_ln99_reg_319, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln99_reg_319 = ap_const_lv1_1))) then 
            dist_we1 <= ap_const_logic_1;
        else 
            dist_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_131_p2 <= std_logic_vector(unsigned(i_0_reg_71) + unsigned(ap_const_lv4_1));
    icmp_ln96_fu_97_p2 <= "1" when (k_0_reg_60 = ap_const_lv4_A) else "0";
    icmp_ln97_fu_125_p2 <= "1" when (i_0_reg_71 = ap_const_lv4_A) else "0";
    icmp_ln98_fu_181_p2 <= "1" when (j_0_reg_82 = ap_const_lv4_A) else "0";
    icmp_ln99_fu_224_p2 <= "1" when (signed(dist_load_reg_294) > signed(add_ln99_3_fu_220_p2)) else "0";
    j_fu_187_p2 <= std_logic_vector(unsigned(j_0_reg_82) + unsigned(ap_const_lv4_1));
    k_fu_103_p2 <= std_logic_vector(unsigned(k_0_reg_60) + unsigned(ap_const_lv4_1));
    shl_ln99_1_fu_117_p3 <= (k_0_reg_60 & ap_const_lv1_0);
    shl_ln99_2_fu_137_p3 <= (i_0_reg_71 & ap_const_lv3_0);
    shl_ln99_3_fu_145_p3 <= (i_0_reg_71 & ap_const_lv1_0);
    shl_ln_fu_109_p3 <= (k_0_reg_60 & ap_const_lv3_0);
    zext_ln96_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_60),7));
    zext_ln98_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_82),7));
    zext_ln98_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_82),5));
    zext_ln99_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_1_reg_278),64));
    zext_ln99_2_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_2_reg_283),64));
    zext_ln99_3_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln99_3_fu_145_p3),7));
    zext_ln99_4_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_5_fu_198_p2),7));
    zext_ln99_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_fu_163_p2),64));
end behav;
