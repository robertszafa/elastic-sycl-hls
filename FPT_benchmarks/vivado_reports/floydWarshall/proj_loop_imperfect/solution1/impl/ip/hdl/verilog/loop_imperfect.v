// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.331000,HLS_SYN_LAT=6221,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=208,HLS_SYN_LUT=302,HLS_VERSION=2019_2}" *)

module loop_imperfect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dist_address0,
        dist_ce0,
        dist_q0,
        dist_address1,
        dist_ce1,
        dist_we1,
        dist_d1,
        dist_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] dist_address0;
output   dist_ce0;
input  [31:0] dist_q0;
output  [6:0] dist_address1;
output   dist_ce1;
output   dist_we1;
output  [31:0] dist_d1;
input  [31:0] dist_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] dist_address0;
reg dist_ce0;
reg[6:0] dist_address1;
reg dist_ce1;
reg dist_we1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] zext_ln96_fu_93_p1;
reg   [6:0] zext_ln96_reg_229;
wire    ap_CS_fsm_state2;
wire   [3:0] k_fu_103_p2;
reg   [3:0] k_reg_237;
wire   [6:0] shl_ln_fu_109_p3;
reg   [6:0] shl_ln_reg_242;
wire   [0:0] icmp_ln96_fu_97_p2;
wire   [4:0] shl_ln99_1_fu_117_p3;
reg   [4:0] shl_ln99_1_reg_247;
wire   [3:0] i_fu_131_p2;
reg   [3:0] i_reg_255;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln99_4_fu_157_p2;
reg   [6:0] add_ln99_4_reg_260;
wire   [0:0] icmp_ln97_fu_125_p2;
reg   [6:0] dist_addr_reg_265;
wire   [3:0] j_fu_187_p2;
reg   [3:0] j_reg_273;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln99_1_fu_193_p2;
reg   [6:0] add_ln99_1_reg_278;
wire   [0:0] icmp_ln98_fu_181_p2;
wire   [6:0] add_ln99_2_fu_207_p2;
reg   [6:0] add_ln99_2_reg_283;
reg   [6:0] dist_addr_1_reg_288;
wire    ap_CS_fsm_state5;
reg   [31:0] dist_load_reg_294;
wire    ap_CS_fsm_state6;
reg   [31:0] dist_load_1_reg_304;
wire    ap_CS_fsm_state7;
reg   [31:0] dist_load_2_reg_309;
wire   [31:0] add_ln99_3_fu_220_p2;
reg   [31:0] add_ln99_3_reg_314;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln99_fu_224_p2;
reg   [0:0] icmp_ln99_reg_319;
reg   [3:0] k_0_reg_60;
reg   [3:0] i_0_reg_71;
reg   [3:0] j_0_reg_82;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln99_fu_168_p1;
wire   [63:0] zext_ln99_1_fu_212_p1;
wire   [63:0] zext_ln99_2_fu_216_p1;
wire   [4:0] shl_ln99_3_fu_145_p3;
wire   [6:0] zext_ln99_3_fu_153_p1;
wire   [6:0] shl_ln99_2_fu_137_p3;
wire   [6:0] add_ln99_fu_163_p2;
wire   [6:0] zext_ln98_1_fu_177_p1;
wire   [4:0] zext_ln98_fu_173_p1;
wire   [4:0] add_ln99_5_fu_198_p2;
wire   [6:0] zext_ln99_4_fu_203_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_71 <= i_reg_255;
    end else if (((icmp_ln96_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_71 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_82 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_82 <= j_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_60 <= k_reg_237;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_60 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln99_1_reg_278 <= add_ln99_1_fu_193_p2;
        add_ln99_2_reg_283 <= add_ln99_2_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln99_3_reg_314 <= add_ln99_3_fu_220_p2;
        icmp_ln99_reg_319 <= icmp_ln99_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln99_4_reg_260[6 : 1] <= add_ln99_4_fu_157_p2[6 : 1];
        dist_addr_reg_265 <= zext_ln99_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dist_addr_1_reg_288 <= zext_ln99_1_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dist_load_1_reg_304 <= dist_q0;
        dist_load_2_reg_309 <= dist_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dist_load_reg_294 <= dist_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_255 <= i_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_273 <= j_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_237 <= k_fu_103_p2;
        zext_ln96_reg_229[3 : 0] <= zext_ln96_fu_93_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln99_1_reg_247[4 : 1] <= shl_ln99_1_fu_117_p3[4 : 1];
        shl_ln_reg_242[6 : 3] <= shl_ln_fu_109_p3[6 : 3];
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dist_address0 = dist_addr_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dist_address0 = zext_ln99_1_fu_212_p1;
    end else begin
        dist_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dist_address1 = dist_addr_1_reg_288;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dist_address1 = zext_ln99_2_fu_216_p1;
    end else begin
        dist_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        dist_ce0 = 1'b1;
    end else begin
        dist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        dist_ce1 = 1'b1;
    end else begin
        dist_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln99_reg_319 == 1'd1))) begin
        dist_we1 = 1'b1;
    end else begin
        dist_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln96_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln97_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln98_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln99_1_fu_193_p2 = (add_ln99_4_reg_260 + zext_ln98_1_fu_177_p1);

assign add_ln99_2_fu_207_p2 = (zext_ln99_4_fu_203_p1 + shl_ln_reg_242);

assign add_ln99_3_fu_220_p2 = (dist_load_1_reg_304 + dist_load_2_reg_309);

assign add_ln99_4_fu_157_p2 = (zext_ln99_3_fu_153_p1 + shl_ln99_2_fu_137_p3);

assign add_ln99_5_fu_198_p2 = (shl_ln99_1_reg_247 + zext_ln98_fu_173_p1);

assign add_ln99_fu_163_p2 = (add_ln99_4_fu_157_p2 + zext_ln96_reg_229);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dist_d1 = add_ln99_3_reg_314;

assign i_fu_131_p2 = (i_0_reg_71 + 4'd1);

assign icmp_ln96_fu_97_p2 = ((k_0_reg_60 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_125_p2 = ((i_0_reg_71 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_181_p2 = ((j_0_reg_82 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_224_p2 = (($signed(dist_load_reg_294) > $signed(add_ln99_3_fu_220_p2)) ? 1'b1 : 1'b0);

assign j_fu_187_p2 = (j_0_reg_82 + 4'd1);

assign k_fu_103_p2 = (k_0_reg_60 + 4'd1);

assign shl_ln99_1_fu_117_p3 = {{k_0_reg_60}, {1'd0}};

assign shl_ln99_2_fu_137_p3 = {{i_0_reg_71}, {3'd0}};

assign shl_ln99_3_fu_145_p3 = {{i_0_reg_71}, {1'd0}};

assign shl_ln_fu_109_p3 = {{k_0_reg_60}, {3'd0}};

assign zext_ln96_fu_93_p1 = k_0_reg_60;

assign zext_ln98_1_fu_177_p1 = j_0_reg_82;

assign zext_ln98_fu_173_p1 = j_0_reg_82;

assign zext_ln99_1_fu_212_p1 = add_ln99_1_reg_278;

assign zext_ln99_2_fu_216_p1 = add_ln99_2_reg_283;

assign zext_ln99_3_fu_153_p1 = shl_ln99_3_fu_145_p3;

assign zext_ln99_4_fu_203_p1 = add_ln99_5_fu_198_p2;

assign zext_ln99_fu_168_p1 = add_ln99_fu_163_p2;

always @ (posedge ap_clk) begin
    zext_ln96_reg_229[6:4] <= 3'b000;
    shl_ln_reg_242[2:0] <= 3'b000;
    shl_ln99_1_reg_247[0] <= 1'b0;
    add_ln99_4_reg_260[0] <= 1'b0;
end

endmodule //loop_imperfect
