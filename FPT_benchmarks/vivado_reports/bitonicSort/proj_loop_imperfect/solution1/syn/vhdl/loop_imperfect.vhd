-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_imperfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of loop_imperfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=203,HLS_SYN_LUT=284,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln96_fu_119_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln96_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln96_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln99_1_reg_256 : STD_LOGIC_VECTOR (29 downto 0);
    signal k_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln102_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_165_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_270 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln107_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_reg_279 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_addr_1_reg_284 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln112_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln112_reg_289 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ai_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal and_ln112_1_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_1_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_in_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln108_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_123_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln102_fu_175_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal l_fu_179_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln102_fu_171_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln112_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_2_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_3_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_102 <= ap_const_lv7_0;
            elsif (((icmp_ln102_reg_266 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_reg_102 <= i_reg_270;
            end if; 
        end if;
    end process;

    j_0_in_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_in_reg_92 <= j_reg_251;
            elsif (((icmp_ln96_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_in_reg_92 <= k_0_reg_80;
            end if; 
        end if;
    end process;

    k_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                k_0_reg_80(31 downto 1) <= k_fu_153_p2(31 downto 1);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_80(1) <= '1';
                k_0_reg_80(2) <= '0';
                k_0_reg_80(3) <= '0';
                k_0_reg_80(4) <= '0';
                k_0_reg_80(5) <= '0';
                k_0_reg_80(6) <= '0';
                k_0_reg_80(7) <= '0';
                k_0_reg_80(8) <= '0';
                k_0_reg_80(9) <= '0';
                k_0_reg_80(10) <= '0';
                k_0_reg_80(11) <= '0';
                k_0_reg_80(12) <= '0';
                k_0_reg_80(13) <= '0';
                k_0_reg_80(14) <= '0';
                k_0_reg_80(15) <= '0';
                k_0_reg_80(16) <= '0';
                k_0_reg_80(17) <= '0';
                k_0_reg_80(18) <= '0';
                k_0_reg_80(19) <= '0';
                k_0_reg_80(20) <= '0';
                k_0_reg_80(21) <= '0';
                k_0_reg_80(22) <= '0';
                k_0_reg_80(23) <= '0';
                k_0_reg_80(24) <= '0';
                k_0_reg_80(25) <= '0';
                k_0_reg_80(26) <= '0';
                k_0_reg_80(27) <= '0';
                k_0_reg_80(28) <= '0';
                k_0_reg_80(29) <= '0';
                k_0_reg_80(30) <= '0';
                k_0_reg_80(31) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_159_p2 = ap_const_lv1_0) and (icmp_ln107_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                A_addr_1_reg_284 <= zext_ln109_fu_195_p1(6 - 1 downto 0);
                A_addr_reg_279 <= zext_ln108_fu_190_p1(6 - 1 downto 0);
                    and_ln112_reg_289(5 downto 1) <= and_ln112_fu_200_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_reg_266 = ap_const_lv1_0) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                Ai_reg_295 <= A_q0;
                and_ln112_1_reg_300 <= and_ln112_1_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_reg_266 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln112_1_fu_216_p2) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln112_2_reg_304 <= and_ln112_2_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_270 <= i_fu_165_p2;
                icmp_ln102_reg_266 <= icmp_ln102_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln107_reg_275 <= icmp_ln107_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    j_reg_251(30 downto 0) <= j_fu_139_p1(30 downto 0);
                trunc_ln99_1_reg_256 <= j_0_in_reg_92(30 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    trunc_ln96_reg_242(5 downto 1) <= trunc_ln96_fu_119_p1(5 downto 1);
            end if;
        end if;
    end process;
    trunc_ln96_reg_242(0) <= '0';
    j_reg_251(31) <= '0';
    and_ln112_reg_289(0) <= '0';
    k_0_reg_80(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln96_fu_113_p2, icmp_ln99_fu_133_p2, ap_CS_fsm_state3, icmp_ln102_fu_159_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln96_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln99_fu_133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln102_fu_159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state4, A_addr_reg_279, ap_CS_fsm_state5, zext_ln108_fu_190_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= A_addr_reg_279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= zext_ln108_fu_190_p1(6 - 1 downto 0);
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, A_addr_1_reg_284, ap_CS_fsm_state6, zext_ln109_fu_195_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address1 <= A_addr_1_reg_284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= zext_ln109_fu_195_p1(6 - 1 downto 0);
        else 
            A_address1 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= A_q1;
    A_d1 <= Ai_reg_295;

    A_we0_assign_proc : process(icmp_ln102_reg_266, icmp_ln107_reg_275, ap_CS_fsm_state5, and_ln112_1_fu_216_p2, and_ln112_2_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (((icmp_ln102_reg_266 = ap_const_lv1_0) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln112_1_fu_216_p2)) or ((icmp_ln102_reg_266 = ap_const_lv1_0) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln112_2_fu_233_p2))))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(icmp_ln102_reg_266, icmp_ln107_reg_275, and_ln112_1_reg_300, and_ln112_2_reg_304, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln102_reg_266 = ap_const_lv1_0) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln112_1_reg_300)) or ((icmp_ln102_reg_266 = ap_const_lv1_0) and (icmp_ln107_reg_275 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln112_2_reg_304))))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln112_1_fu_216_p2 <= (icmp_ln112_fu_205_p2 and icmp_ln112_1_fu_210_p2);
    and_ln112_2_fu_233_p2 <= (icmp_ln112_3_fu_228_p2 and icmp_ln112_2_fu_222_p2);
    and_ln112_fu_200_p2 <= (trunc_ln96_reg_242 and trunc_ln102_fu_171_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_113_p2)
    begin
        if (((icmp_ln96_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_113_p2)
    begin
        if (((icmp_ln96_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_165_p2 <= std_logic_vector(unsigned(i_0_reg_102) + unsigned(ap_const_lv7_1));
    icmp_ln102_fu_159_p2 <= "1" when (i_0_reg_102 = ap_const_lv7_40) else "0";
    icmp_ln107_fu_184_p2 <= "1" when (unsigned(l_fu_179_p2) > unsigned(zext_ln102_fu_175_p1)) else "0";
    icmp_ln112_1_fu_210_p2 <= "1" when (signed(A_q0) > signed(A_q1)) else "0";
    icmp_ln112_2_fu_222_p2 <= "1" when (signed(A_q0) < signed(A_q1)) else "0";
    icmp_ln112_3_fu_228_p2 <= "0" when (and_ln112_reg_289 = ap_const_lv6_0) else "1";
    icmp_ln112_fu_205_p2 <= "1" when (and_ln112_reg_289 = ap_const_lv6_0) else "0";
    icmp_ln96_fu_113_p2 <= "1" when (signed(k_0_reg_80) < signed(ap_const_lv32_41)) else "0";
    icmp_ln99_fu_133_p2 <= "1" when (signed(trunc_ln1_fu_123_p4) > signed(ap_const_lv31_0)) else "0";
    j_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_123_p4),32));
    k_fu_153_p2 <= std_logic_vector(shift_left(unsigned(k_0_reg_80),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    l_fu_179_p2 <= (zext_ln102_fu_175_p1 xor trunc_ln99_1_reg_256);
    trunc_ln102_fu_171_p1 <= i_0_reg_102(6 - 1 downto 0);
    trunc_ln1_fu_123_p4 <= j_0_in_reg_92(31 downto 1);
    trunc_ln96_fu_119_p1 <= k_0_reg_80(6 - 1 downto 0);
    zext_ln102_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_102),30));
    zext_ln108_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_102),64));
    zext_ln109_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_fu_179_p2),64));
end behav;
