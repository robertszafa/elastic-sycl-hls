-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_imperfect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vertices_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    vertices_ce0 : OUT STD_LOGIC;
    vertices_we0 : OUT STD_LOGIC;
    vertices_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vertices_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    vertices_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    vertices_ce1 : OUT STD_LOGIC;
    vertices_we1 : OUT STD_LOGIC;
    vertices_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vertices_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    edges_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edges_ce0 : OUT STD_LOGIC;
    edges_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edges_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edges_ce1 : OUT STD_LOGIC;
    edges_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of loop_imperfect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_imperfect,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.664000,HLS_SYN_LAT=6001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=114,HLS_SYN_LUT=141,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_95_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln99_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vertices_addr_reg_163 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal vertices_addr_1_reg_168 : STD_LOGIC_VECTOR (10 downto 0);
    signal v1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v2_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln108_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_78 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln102_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln105_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln106_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_101_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln103_fu_114_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln108_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_78 <= i_reg_148;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_78 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_148 <= i_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln108_reg_185 <= icmp_ln108_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                v1_reg_173 <= vertices_q0;
                v2_reg_179 <= vertices_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                vertices_addr_1_reg_168 <= sext_ln106_fu_130_p1(11 - 1 downto 0);
                vertices_addr_reg_163 <= sext_ln105_fu_125_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln99_fu_89_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln99_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln99_fu_89_p2)
    begin
        if (((icmp_ln99_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln99_fu_89_p2)
    begin
        if (((icmp_ln99_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    edges_address0 <= zext_ln102_fu_109_p1(11 - 1 downto 0);
    edges_address1 <= zext_ln103_fu_120_p1(11 - 1 downto 0);

    edges_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edges_ce0 <= ap_const_logic_1;
        else 
            edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edges_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edges_ce1 <= ap_const_logic_1;
        else 
            edges_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_95_p2 <= std_logic_vector(unsigned(i_0_reg_78) + unsigned(ap_const_lv10_1));
    icmp_ln108_fu_139_p2 <= "1" when (or_ln108_fu_135_p2 = ap_const_lv32_0) else "0";
    icmp_ln99_fu_89_p2 <= "1" when (i_0_reg_78 = ap_const_lv10_3E8) else "0";
    j_fu_101_p3 <= (i_0_reg_78 & ap_const_lv1_0);
    or_ln103_fu_114_p2 <= (j_fu_101_p3 or ap_const_lv11_1);
    or_ln108_fu_135_p2 <= (v2_reg_179 or v1_reg_173);
        sext_ln105_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(edges_q0),64));

        sext_ln106_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(edges_q1),64));

    vertices_address0 <= vertices_addr_reg_163;
    vertices_address1 <= vertices_addr_1_reg_168;

    vertices_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            vertices_ce0 <= ap_const_logic_1;
        else 
            vertices_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vertices_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            vertices_ce1 <= ap_const_logic_1;
        else 
            vertices_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    vertices_d0 <= v2_reg_179;
    vertices_d1 <= v1_reg_173;

    vertices_we0_assign_proc : process(icmp_ln108_fu_139_p2, ap_CS_fsm_state6)
    begin
        if (((icmp_ln108_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            vertices_we0 <= ap_const_logic_1;
        else 
            vertices_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vertices_we1_assign_proc : process(icmp_ln108_reg_185, ap_CS_fsm_state7)
    begin
        if (((icmp_ln108_reg_185 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            vertices_we1 <= ap_const_logic_1;
        else 
            vertices_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln102_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_101_p3),64));
    zext_ln103_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln103_fu_114_p2),64));
end behav;
